GAWK(1)                                     Utility Commands                                     GAWK(1)

[1mNAME[0m
       gawk - pattern scanning and processing language

[1mSYNOPSIS[0m
       [1mgawk [22m[ POSIX or GNU style options ] [1m-f [4m[22mprogram-file[24m [ [1m-- [22m] file ...
       [1mgawk [22m[ POSIX or GNU style options ] [ [1m-- [22m] [4mprogram-text[24m file ...

[1mDESCRIPTION[0m
       [4mGawk[24m  is  the  GNU  Project's implementation of the AWK programming language.  It conforms to the
       definition of the language in the POSIX 1003.1 standard.  This version in turn is  based  on  the
       description  in  [4mThe[24m  [4mAWK[24m [4mProgramming[24m [4mLanguage[24m, by Aho, Kernighan, and Weinberger.  [4mGawk[24m provides
       the additional features found in the current version of Brian Kernighan's [4mawk[24m and  numerous  GNU-
       specific extensions.

       The  command  line  consists of options to [4mgawk[24m itself, the AWK program text (if not supplied via
       the [1m-f [22mor [1m-i [22moptions), and values to be made available in the [1mARGC [22mand [1mARGV [22mpre-defined AWK vari‚Äê
       ables.

       When [4mgawk[24m is invoked with the [1m--profile [22moption, it starts gathering profiling statistics from the
       execution of the program.  [4mGawk[24m runs more slowly in this mode, and automatically produces an exe‚Äê
       cution profile in the file [1mawkprof.out [22mwhen done.  See the [1m--profile [22moption, below.

       [4mGawk[24m  also has an integrated debugger. An interactive debugging session can be started by supply‚Äê
       ing the [1m--debug [22moption to the command line. In this mode of execution, [4mgawk[24m loads the AWK  source
       code  and  then  prompts for debugging commands.  [4mGawk[24m can only debug AWK program source provided
       with the [1m-f [22moption.  The debugger is documented in [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m.

[1mOPTION FORMAT[0m
       [4mGawk[24m options may be either traditional POSIX-style one letter options, or GNU-style long options.
       POSIX options start with a single ‚Äú-‚Äù, while long options start with ‚Äú--‚Äù.  Long options are pro‚Äê
       vided for both GNU-specific features and for POSIX-mandated features.

       [4mGawk[24m-specific options are typically used in long-option form.   Arguments  to  long  options  are
       either  joined  with the option by an [1m= [22msign, with no intervening spaces, or they may be provided
       in the next command line argument.  Long options may be abbreviated, as long as the  abbreviation
       remains unique.

       Additionally,  every long option has a corresponding short option, so that the option's function‚Äê
       ality may be used from within [1m#!  [22mexecutable scripts.

[1mOPTIONS[0m
       [4mGawk[24m accepts the following options.  Standard options are listed first, followed by  options  for
       [4mgawk[24m extensions, listed alphabetically by short option.

       [1m-f [4m[22mprogram-file[0m
       [1m--file [4m[22mprogram-file[0m
              Read  the AWK program source from the file [4mprogram-file[24m, instead of from the first command
              line argument.  Multiple [1m-f [22m(or [1m--file[22m) options may be used.

       [1m-F [4m[22mfs[0m
       [1m--field-separator [4m[22mfs[0m
              Use [4mfs[24m for the input field separator (the value of the [1mFS [22mpredefined variable).

       [1m-v [4m[22mvar[24m[1m=[4m[22mval[0m
       [1m--assign [4m[22mvar[24m[1m=[4m[22mval[0m
              Assign the value [4mval[24m to the variable [4mvar[24m, before execution of the  program  begins.   Such
              variable values are available to the [1mBEGIN [22mrule of an AWK program.

       [1m-b[0m
       [1m--characters-as-bytes[0m
              Treat all input data as single-byte characters. In other words, don't pay any attention to
              the locale information when attempting to process strings as  multibyte  characters.   The
              [1m--posix [22moption overrides this one.

       [1m-c[0m
       [1m--traditional[0m
              Run  in  [4mcompatibility[24m  mode.   In  compatibility  mode, [4mgawk[24m behaves identically to Brian
              Kernighan's [4mawk[24m; none of the GNU-specific extensions are recognized.  See [1mGNU  EXTENSIONS[22m,
              below, for more information.

       [1m-C[0m
       [1m--copyright[0m
              Print  the  short  version of the GNU copyright information message on the standard output
              and exit successfully.

       [1m-d[22m[[4mfile[24m]
       [1m--dump-variables[22m[[1m=[4m[22mfile[24m]
              Print a sorted list of global variables, their types and final values to [4mfile[24m.  If no [4mfile[0m
              is provided, [4mgawk[24m uses a file named [1mawkvars.out [22min the current directory.
              Having  a  list of all the global variables is a good way to look for typographical errors
              in your programs.  You would also use this option if you have a large program with  a  lot
              of  functions,  and you want to be sure that your functions don't inadvertently use global
              variables that you meant to be local.  (This is a particularly easy mistake to  make  with
              simple variable names like [1mi[22m, [1mj[22m, and so on.)

       [1m-D[22m[[4mfile[24m]
       [1m--debug[22m[[1m=[4m[22mfile[24m]
              Enable  debugging  of AWK programs.  By default, the debugger reads commands interactively
              from the keyboard (standard input).  The optional [4mfile[24m argument specifies a  file  with  a
              list of commands for the debugger to execute non-interactively.

       [1m-e [4m[22mprogram-text[0m
       [1m--source [4m[22mprogram-text[0m
              Use  [4mprogram-text[24m  as AWK program source code.  This option allows the easy intermixing of
              library functions (used via the [1m-f [22mand [1m-i [22moptions) with source code entered on the command
              line.  It is intended primarily for medium to large AWK programs used in shell scripts.

       [1m-E [4m[22mfile[0m
       [1m--exec [4m[22mfile[0m
              Similar  to  [1m-f[22m,  however,  this is option is the last one processed.  This should be used
              with [1m#!  [22mscripts, particularly for CGI applications, to avoid passing in options or source
              code  (!)  on  the  command  line  from a URL.  This option disables command-line variable
              assignments.

       [1m-g[0m
       [1m--gen-pot[0m
              Scan and parse the AWK program, and generate a GNU [1m.pot [22m(Portable Object Template)  format
              file on standard output with entries for all localizable strings in the program.  The pro‚Äê
              gram itself is not executed.  See the GNU [4mgettext[24m distribution  for  more  information  on
              [1m.pot [22mfiles.

       [1m-h[0m
       [1m--help [22mPrint  a  relatively  short summary of the available options on the standard output.  (Per
              the [4mGNU[24m [4mCoding[24m [4mStandards[24m, these options cause an immediate, successful exit.)

       [1m-i [4m[22minclude-file[0m
       [1m--include [4m[22minclude-file[0m
              Load an awk source library.  This searches for the library using the  [1mAWKPATH  [22menvironment
              variable.   If  the initial search fails, another attempt will be made after appending the
              [1m.awk [22msuffix.  The file will be loaded only once (i.e., duplicates are eliminated), and the
              code does not constitute the main program source.

       [1m-l [4m[22mlib[0m
       [1m--load [4m[22mlib[0m
              Load  a  [4mgawk[24m  extension from the shared library [4mlib[24m.  This searches for the library using
              the [1mAWKLIBPATH [22menvironment variable.  If the initial search fails, another attempt will be
              made after appending the default shared library suffix for the platform.  The library ini‚Äê
              tialization routine is expected to be named [1mdl_load()[22m.

       [1m-L [22m[[4mvalue[24m]
       [1m--lint[22m[[1m=[4m[22mvalue[24m]
              Provide warnings about constructs that are dubious or non-portable to other AWK  implemen‚Äê
              tations.  With an optional argument of [1mfatal[22m, lint warnings become fatal errors.  This may
              be drastic, but its use will certainly encourage the development of cleaner AWK  programs.
              With an optional argument of [1minvalid[22m, only warnings about things that are actually invalid
              are issued. (This is not fully implemented yet.)

       [1m-M[0m
       [1m--bignum[0m
              Force arbitrary precision arithmetic on numbers. This option has no effect if [4mgawk[24m is  not
              compiled to use the GNU MPFR and MP libraries.  (In such a case, [4mgawk[24m issues a warning.)

       [1m-n[0m
       [1m--non-decimal-data[0m
              Recognize octal and hexadecimal values in input data.  [4mUse[24m [4mthis[24m [4moption[24m [4mwith[24m [4mgreat[24m [4mcaution![0m

       [1m-N[0m
       [1m--use-lc-numeric[0m
              Force  [4mgawk[24m to use the locale's decimal point character when parsing input data.  Although
              the POSIX standard requires this behavior, and [4mgawk[24m does so when [1m--posix [22mis in effect, the
              default  is  to follow traditional behavior and use a period as the decimal point, even in
              locales where the period is not the decimal point character.  This  option  overrides  the
              default behavior, without the full draconian strictness of the [1m--posix [22moption.

       [1m-o[22m[[4mfile[24m]
       [1m--pretty-print[22m[[1m=[4m[22mfile[24m]
              Output a pretty printed version of the program to [4mfile[24m.  If no [4mfile[24m is provided, [4mgawk[24m uses
              a file named [1mawkprof.out [22min the current directory.  Implies [1m--no-optimize[22m.

       [1m-O[0m
       [1m--optimize[0m
              Enable [4mgawk[24m's default optimizations upon the internal representation of the program.  Cur‚Äê
              rently,  this  includes  simple  constant-folding, and tail call elimination for recursive
              functions.  This option is on by default.

       [1m-p[22m[[4mprof-file[24m]
       [1m--profile[22m[[1m=[4m[22mprof-file[24m]
              Start a profiling session, and send the profiling  data  to  [4mprof-file[24m.   The  default  is
              [1mawkprof.out[22m.   The  profile  contains execution counts of each statement in the program in
              the left margin  and  function  call  counts  for  each  user-defined  function.   Implies
              [1m--no-optimize[22m.

       [1m-P[0m
       [1m--posix[0m
              This turns on [4mcompatibility[24m mode, with the following additional restrictions:

              ¬∑ [1m\x [22mescape sequences are not recognized.

              ¬∑ You cannot continue lines after [1m?  [22mand [1m:[22m.

              ¬∑ The synonym [1mfunc [22mfor the keyword [1mfunction [22mis not recognized.

              ¬∑ The operators [1m** [22mand [1m**= [22mcannot be used in place of [1m^ [22mand [1m^=[22m.

       [1m-r[0m
       [1m--re-interval[0m
              Enable the use of [4minterval[24m [4mexpressions[24m in regular expression matching (see [1mRegular Expres‚Äê[0m
              [1msions[22m, below).  Interval expressions were not traditionally available in the AWK language.
              The POSIX standard added them, to make [4mawk[24m and [4megrep[24m consistent with each other.  They are
              enabled by default, but this option remains for use with [1m--traditional[22m.

       [1m-s[0m
       [1m--no-optimize[0m
              Disable [4mgawk[24m's default optimizations upon the internal representation of the program.

       [1m-S[0m
       [1m--sandbox[0m
              Run [4mgawk[24m in sandbox mode, disabling the [1msystem() [22mfunction, input redirection with [1mgetline[22m,
              output  redirection with [1mprint [22mand [1mprintf[22m, and loading dynamic extensions.  Command execu‚Äê
              tion (through pipelines) is also disabled.  This effectively blocks a script from  access‚Äê
              ing local resources, except for the files specified on the command line.

       [1m-t[0m
       [1m--lint-old[0m
              Provide  warnings  about  constructs that are not portable to the original version of UNIX
              [4mawk[24m.

       [1m-V[0m
       [1m--version[0m
              Print version information for this particular copy of [4mgawk[24m on the standard  output.   This
              is useful mainly for knowing if the current copy of [4mgawk[24m on your system is up to date with
              respect to whatever the Free Software Foundation is distributing.   This  is  also  useful
              when  reporting  bugs.   (Per  the [4mGNU[24m [4mCoding[24m [4mStandards[24m, these options cause an immediate,
              successful exit.)

       [1m--     [22mSignal the end of options. This is useful to allow further arguments to  the  AWK  program
              itself  to  start with a ‚Äú-‚Äù.  This provides consistency with the argument parsing conven‚Äê
              tion used by most other POSIX programs.

       In compatibility mode, any other options are flagged as invalid, but are otherwise  ignored.   In
       normal operation, as long as program text has been supplied, unknown options are passed on to the
       AWK program in the [1mARGV [22marray for processing.  This is particularly useful for running  AWK  pro‚Äê
       grams via the [1m#!  [22mexecutable interpreter mechanism.

       For POSIX compatibility, the [1m-W [22moption may be used, followed by the name of a long option.

[1mAWK PROGRAM EXECUTION[0m
       An  AWK  program  consists  of  a sequence of optional directives, pattern-action statements, and
       optional function definitions.

              [1m@include "[4m[22mfilename[24m[1m"[0m
              [1m@load "[4m[22mfilename[24m[1m"[0m
              [4mpattern[24m   [1m{ [4m[22maction[24m [4mstatements[24m [1m}[0m
              [1mfunction [4m[22mname[24m[1m([4m[22mparameter[24m [4mlist[24m[1m) { [4m[22mstatements[24m [1m}[0m

       [4mGawk[24m first reads the program source from the [4mprogram-file[24m(s)  if  specified,  from  arguments  to
       [1m--source[22m, or from the first non-option argument on the command line.  The [1m-f [22mand [1m--source [22moptions
       may be used multiple times on the command line.  [4mGawk[24m reads the program text as if all  the  [4mpro‚Äê[0m
       [4mgram-file[24ms  and  command  line  source  texts had been concatenated together.  This is useful for
       building libraries of AWK functions, without having to include them in each new AWK program  that
       uses them.  It also provides the ability to mix library functions with command line programs.

       In  addition,  lines  beginning with [1m@include [22mmay be used to include other source files into your
       program, making library use even easier.  This is equivalent to using the [1m-i [22moption.

       Lines beginning with [1m@load [22mmay be used to load extension functions into your  program.   This  is
       equivalent to using the [1m-l [22moption.

       The  environment  variable [1mAWKPATH [22mspecifies a search path to use when finding source files named
       with  the  [1m-f  [22mand  [1m-i  [22moptions.   If  this  variable  does  not  exist,  the  default  path   is
       [1m".:/usr/local/share/awk"[22m.   (The actual directory may vary, depending upon how [4mgawk[24m was built and
       installed.)  If a file name given to the [1m-f [22moption contains a ‚Äú/‚Äù character, no  path  search  is
       performed.

       The  environment  variable  [1mAWKLIBPATH  [22mspecifies  a search path to use when finding source files
       named  with  the  [1m-l  [22moption.   If  this  variable  does  not  exist,   the   default   path   is
       [1m"/usr/local/lib/gawk"[22m.   (The  actual  directory  may vary, depending upon how [4mgawk[24m was built and
       installed.)

       [4mGawk[24m executes AWK programs in the following order.  First, all variable assignments specified via
       the  [1m-v [22moption are performed.  Next, [4mgawk[24m compiles the program into an internal form.  Then, [4mgawk[0m
       executes the code in the [1mBEGIN [22mrule(s) (if any), and then proceeds to read each file named in the
       [1mARGV [22marray (up to [1mARGV[ARGC-1][22m).  If there are no files named on the command line, [4mgawk[24m reads the
       standard input.

       If a filename on the command line has the form [4mvar[24m[1m=[4m[22mval[24m it is treated as  a  variable  assignment.
       The variable [4mvar[24m will be assigned the value [4mval[24m.  (This happens after any [1mBEGIN [22mrule(s) have been
       run.)  Command line variable assignment is most useful for dynamically assigning  values  to  the
       variables AWK uses to control how input is broken into fields and records.  It is also useful for
       controlling state if multiple passes are needed over a single data file.

       If the value of a particular element of [1mARGV [22mis empty ([1m""[22m), [4mgawk[24m skips over it.

       For each input file, if a [1mBEGINFILE [22mrule exists, [4mgawk[24m executes the associated  code  before  pro‚Äê
       cessing the contents of the file. Similarly, [4mgawk[24m executes the code associated with [1mENDFILE [22mafter
       processing the file.

       For each record in the input, [4mgawk[24m tests to see if it matches any [4mpattern[24m  in  the  AWK  program.
       For  each pattern that the record matches, [4mgawk[24m executes the associated [4maction[24m.  The patterns are
       tested in the order they occur in the program.

       Finally, after all the input is exhausted, [4mgawk[24m executes the code in the [1mEND [22mrule(s) (if any).

   [1mCommand Line Directories[0m
       According to POSIX, files named on the [4mawk[24m command line must be  text  files.   The  behavior  is
       ``undefined''  if  they are not.  Most versions of [4mawk[24m treat a directory on the command line as a
       fatal error.

       Starting with version 4.0 of [4mgawk[24m, a directory on the command line produces  a  warning,  but  is
       otherwise skipped.  If either of the [1m--posix [22mor [1m--traditional [22moptions is given, then [4mgawk[24m reverts
       to treating directories on the command line as a fatal error.

[1mVARIABLES, RECORDS AND FIELDS[0m
       AWK variables are dynamic; they come into existence when they are first used.  Their  values  are
       either  floating-point  numbers or strings, or both, depending upon how they are used.  Addition‚Äê
       ally, [4mgawk[24m allows variables to have  regular-expression  type.   AWK  also  has  one  dimensional
       arrays;  arrays  with multiple dimensions may be simulated.  [4mGawk[24m provides true arrays of arrays;
       see [1mArrays[22m, below.  Several pre-defined variables are set as a program runs; these are  described
       as needed and summarized below.

   [1mRecords[0m
       Normally, records are separated by newline characters.  You can control how records are separated
       by assigning values to the built-in variable [1mRS[22m.  If [1mRS [22mis any single character,  that  character
       separates  records.   Otherwise, [1mRS [22mis a regular expression.  Text in the input that matches this
       regular expression separates the record.  However, in compatibility mode, only the first  charac‚Äê
       ter  of  its  string value is used for separating records.  If [1mRS [22mis set to the null string, then
       records are separated by empty lines.  When [1mRS [22mis set to the null string, the  newline  character
       always acts as a field separator, in addition to whatever value [1mFS [22mmay have.

   [1mFields[0m
       As each input record is read, [4mgawk[24m splits the record into [4mfields[24m, using the value of the [1mFS [22mvari‚Äê
       able as the field separator.  If [1mFS [22mis a single character, fields are separated by  that  charac‚Äê
       ter.   If [1mFS [22mis the null string, then each individual character becomes a separate field.  Other‚Äê
       wise, [1mFS [22mis expected to be a full regular expression.  In the special case that [1mFS  [22mis  a  single
       space,  fields  are  separated by runs of spaces and/or tabs and/or newlines.  [1mNOTE[22m: The value of
       [1mIGNORECASE [22m(see below) also affects how fields are split when [1mFS [22mis a regular expression, and how
       records are separated when [1mRS [22mis a regular expression.

       If  the  [1mFIELDWIDTHS [22mvariable is set to a space-separated list of numbers, each field is expected
       to have fixed width, and [4mgawk[24m splits up the record using the specified widths.  Each field  width
       may optionally be preceded by a colon-separated value specifying the number of characters to skip
       before the field starts.  The value of [1mFS [22mis ignored.  Assigning a new value to [1mFS [22mor [1mFPAT  [22mover‚Äê
       rides the use of [1mFIELDWIDTHS[22m.

       Similarly,  if the [1mFPAT [22mvariable is set to a string representing a regular expression, each field
       is made up of text that matches that regular expression. In this  case,  the  regular  expression
       describes  the fields themselves, instead of the text that separates the fields.  Assigning a new
       value to [1mFS [22mor [1mFIELDWIDTHS [22moverrides the use of [1mFPAT[22m.

       Each field in the input record may be referenced by its position: [1m$1[22m, [1m$2[22m, and so on.  [1m$0  [22mis  the
       whole record.  Fields need not be referenced by constants:

              [1mn = 5[0m
              [1mprint $n[0m

       prints the fifth field in the input record.

       The variable [1mNF [22mis set to the total number of fields in the input record.

       References  to  non-existent  fields  (i.e., fields after [1m$NF[22m) produce the null-string.  However,
       assigning to a non-existent field (e.g., [1m$(NF+2) = 5[22m) increases the  value  of  [1mNF[22m,  creates  any
       intervening  fields with the null string as their values, and causes the value of [1m$0 [22mto be recom‚Äê
       puted, with the fields being separated by the value of  [1mOFS[22m.   References  to  negative  numbered
       fields cause a fatal error.  Decrementing [1mNF [22mcauses the values of fields past the new value to be
       lost, and the value of [1m$0 [22mto be recomputed, with the fields being separated by the value of [1mOFS[22m.

       Assigning a value to an existing field causes the whole record to be rebuilt when  [1m$0  [22mis  refer‚Äê
       enced.   Similarly,  assigning a value to [1m$0 [22mcauses the record to be resplit, creating new values
       for the fields.

   [1mBuilt-in Variables[0m
       [4mGawk[24m's built-in variables are:

       [1mARGC        [22mThe number of command line arguments (does not include options to [4mgawk[24m, or  the  pro‚Äê
                   gram source).

       [1mARGIND      [22mThe index in [1mARGV [22mof the current file being processed.

       [1mARGV        [22mArray  of  command line arguments.  The array is indexed from 0 to [1mARGC [22m- 1.  Dynami‚Äê
                   cally changing the contents of [1mARGV [22mcan control the files used for data.

       [1mBINMODE     [22mOn non-POSIX systems, specifies use of ‚Äúbinary‚Äù mode for all file I/O.  Numeric  val‚Äê
                   ues  of  1,  2,  or  3, specify that input files, output files, or all files, respec‚Äê
                   tively, should use binary I/O.  String values of  [1m"r"[22m,  or  [1m"w"  [22mspecify  that  input
                   files,  or  output files, respectively, should use binary I/O.  String values of [1m"rw"[0m
                   or [1m"wr" [22mspecify that all files should use binary I/O.   Any  other  string  value  is
                   treated as [1m"rw"[22m, but generates a warning message.

       [1mCONVFMT     [22mThe conversion format for numbers, [1m"%.6g"[22m, by default.

       [1mENVIRON     [22mAn  array  containing the values of the current environment.  The array is indexed by
                   the environment variables, each element being the value of that variable (e.g., [1mENVI‚Äê[0m
                   [1mRON["HOME"] [22mmight be [1m"/home/arnold"[22m).

                   In  POSIX  mode, changing this array does not affect the environment seen by programs
                   which [4mgawk[24m spawns via redirection or the [1msystem() [22mfunction.  Otherwise, [4mgawk[24m  updates
                   its real environment so that programs it spawns see the changes.

       [1mERRNO       [22mIf  a  system  error occurs either doing a redirection for [1mgetline[22m, during a read for
                   [1mgetline[22m, or during a [1mclose()[22m, then [1mERRNO [22mis set to a  string  describing  the  error.
                   The  value  is subject to translation in non-English locales.  If the string in [1mERRNO[0m
                   corresponds to a system error in the [4merrno[24m(3) variable, then the numeric value can be
                   found in [1mPROCINFO["errno"].  [22mFor non-system errors, [1mPROCINFO["errno"] [22mwill be zero.

       [1mFIELDWIDTHS [22mA  whitespace-separated  list  of field widths.  When set, [4mgawk[24m parses the input into
                   fields of fixed width, instead of using the value of the [1mFS  [22mvariable  as  the  field
                   separator.   Each  field  width may optionally be preceded by a colon-separated value
                   specifying the number of characters to skip before the  field  starts.   See  [1mFields[22m,
                   above.

       [1mFILENAME    [22mThe  name  of the current input file.  If no files are specified on the command line,
                   the value of [1mFILENAME [22mis ‚Äú-‚Äù.  However, [1mFILENAME [22mis undefined inside the  [1mBEGIN  [22mrule
                   (unless set by [1mgetline[22m).

       [1mFNR         [22mThe input record number in the current input file.

       [1mFPAT        [22mA  regular  expression  describing the contents of the fields in a record.  When set,
                   [4mgawk[24m parses the input into fields, where the fields  match  the  regular  expression,
                   instead  of  using  the value of the [1mFS [22mvariable as the field separator.  See [1mFields[22m,
                   above.

       [1mFS          [22mThe input field separator, a space by default.  See [1mFields[22m, above.

       [1mFUNCTAB     [22mAn array whose indices and corresponding values are the names of all the user-defined
                   or  extension  functions  in the program.  [1mNOTE[22m: You may not use the [1mdelete [22mstatement
                   with the [1mFUNCTAB [22marray.

       [1mIGNORECASE  [22mControls the case-sensitivity of all regular expression and  string  operations.   If
                   [1mIGNORECASE  [22mhas  a  non-zero  value,  then string comparisons and pattern matching in
                   rules, field splitting with [1mFS [22mand [1mFPAT[22m, record separating with [1mRS[22m,  regular  expres‚Äê
                   sion  matching with [1m~ [22mand [1m!~[22m, and the [1mgensub()[22m, [1mgsub()[22m, [1mindex()[22m, [1mmatch()[22m, [1mpatsplit()[22m,
                   [1msplit()[22m, and [1msub() [22mbuilt-in functions all ignore case when doing  regular  expression
                   operations.   [1mNOTE[22m:  Array  subscripting  is  [4mnot[24m affected.  However, the [1masort() [22mand
                   [1masorti() [22mfunctions are affected.
                   Thus, if [1mIGNORECASE [22mis not equal to zero, [1m/aB/ [22mmatches all of the strings [1m"ab"[22m, [1m"aB"[22m,
                   [1m"Ab"[22m,  and [1m"AB"[22m.  As with all AWK variables, the initial value of [1mIGNORECASE [22mis zero,
                   so all regular expression and string operations are normally case-sensitive.

       [1mLINT        [22mProvides dynamic control of the [1m--lint [22moption from within an AWK program.  When true,
                   [4mgawk[24m  prints  lint warnings. When false, it does not.  When assigned the string value
                   [1m"fatal"[22m, lint warnings become fatal errors, exactly  like  [1m--lint=fatal[22m.   Any  other
                   true value just prints warnings.

       [1mNF          [22mThe number of fields in the current input record.

       [1mNR          [22mThe total number of input records seen so far.

       [1mOFMT        [22mThe output format for numbers, [1m"%.6g"[22m, by default.

       [1mOFS         [22mThe output field separator, a space by default.

       [1mORS         [22mThe output record separator, by default a newline.

       [1mPREC        [22mThe working precision of arbitrary precision floating-point numbers, 53 by default.

       [1mPROCINFO    [22mThe  elements  of this array provide access to information about the running AWK pro‚Äê
                   gram.  On some systems, there may be elements in the array, [1m"group1" [22mthrough [1m"group[4m[22mn[24m[1m"[0m
                   for  some  [4mn[24m,  which is the number of supplementary groups that the process has.  Use
                   the [1min [22moperator to test for these elements.  The following elements are guaranteed to
                   be available:

                   [1mPROCINFO["argv"]     [22mThe command line arguments as received by [4mgawk[24m at the C-language
                                        level.  The subscripts start from zero.

                   [1mPROCINFO["egid"]     [22mThe value of the [4mgetegid[24m(2) system call.

                   [1mPROCINFO["errno"]    [22mThe value of [4merrno[24m(3) when [1mERRNO [22mis set to the associated  error
                                        message.

                   [1mPROCINFO["euid"]     [22mThe value of the [4mgeteuid[24m(2) system call.

                   [1mPROCINFO["FS"]       "FS"  [22mif  field  splitting with [1mFS [22mis in effect, [1m"FPAT" [22mif field
                                        splitting with [1mFPAT [22mis in effect, [1m"FIELDWIDTHS" [22mif field  split‚Äê
                                        ting with [1mFIELDWIDTHS [22mis in effect, or [1m"API" [22mif API input parser
                                        field splitting is in effect.

                   [1mPROCINFO["gid"]      [22mThe value of the [4mgetgid[24m(2) system call.

                   [1mPROCINFO["identifiers"][0m
                                        A subarray, indexed by the names of all identifiers used in  the
                                        text  of  the  AWK program.  The values indicate what [4mgawk[24m knows
                                        about the identifiers after it has finished parsing the program;
                                        they  are  [4mnot[24m updated while the program runs.  For each identi‚Äê
                                        fier, the value of the element is one of the following:

                                        [1m"array"     [22mThe identifier is an array.

                                        [1m"builtin"   [22mThe identifier is a built-in function.

                                        [1m"extension" [22mThe identifier is an extension function  loaded  via
                                                    [1m@load [22mor [1m-l[22m.

                                        [1m"scalar"    [22mThe identifier is a scalar.

                                        [1m"untyped"   [22mThe identifier is untyped (could be used as a scalar
                                                    or array, [4mgawk[24m doesn't know yet).

                                        [1m"user"      [22mThe identifier is a user-defined function.

                   [1mPROCINFO["pgrpid"]   [22mThe process group ID of the current process.

                   [1mPROCINFO["pid"]      [22mThe process ID of the current process.

                   [1mPROCINFO["ppid"]     [22mThe parent process ID of the current process.

                   [1mPROCINFO["strftime"] [22mThe default time format string for [1mstrftime()[22m.

                   [1mPROCINFO["uid"]      [22mThe value of the [4mgetuid[24m(2) system call.

                   [1mPROCINFO["version"]  [22mthe version of [4mgawk[24m.

                   The following elements are present if loading dynamic extensions is available:

                   [1mPROCINFO["api_major"][0m
                          The major version of the extension API.

                   [1mPROCINFO["api_minor"][0m
                          The minor version of the extension API.

                   The following elements are available if MPFR support is compiled into [4mgawk[24m:

                   [1mPROCINFO["gmp_version"][0m
                          The version of the GNU MP library used for arbitrary precision number  support
                          in [4mgawk[24m.

                   [1mPROCINFO["mpfr_version"][0m
                          The  version  of the GNU MPFR library used for arbitrary precision number sup‚Äê
                          port in [4mgawk[24m.

                   [1mPROCINFO["prec_max"][0m
                          The maximum precision supported by the GNU MPFR library for  arbitrary  preci‚Äê
                          sion floating-point numbers.

                   [1mPROCINFO["prec_min"][0m
                          The  minimum precision allowed by the GNU MPFR library for arbitrary precision
                          floating-point numbers.

                   The following elements may set by a program to change [4mgawk[24m's behavior:

                   [1mPROCINFO["NONFATAL"][0m
                          If this exists, then I/O errors for all redirections become nonfatal.

                   [1mPROCINFO["[4m[22mname[24m[1m", "NONFATAL"][0m
                          Make I/O errors for [4mname[24m be nonfatal.

                   [1mPROCINFO["[4m[22mcommand[24m[1m", "pty"][0m
                          Use a pseudo-tty for two-way communication with [4mcommand[24m instead of setting  up
                          two one-way pipes.

                   [1mPROCINFO["[4m[22minput[24m[1m", "READ_TIMEOUT"][0m
                          The  timeout in milliseconds for reading data from [4minput[24m, where [4minput[24m is a re‚Äê
                          direction string or a filename. A value of zero or less  than  zero  means  no
                          timeout.

                   [1mPROCINFO["[4m[22minput[24m[1m", "RETRY"][0m
                          If  an  I/O error that may be retried occurs when reading data from [4minput[24m, and
                          this array entry exists, then [1mgetline [22mreturns  -2  instead  of  following  the
                          default  behavior  of  returning -1 and configuring [4minput[24m to return no further
                          data.  An I/O error that may be retried is one where [4merrno[24m(3)  has  the  value
                          EAGAIN,  EWOULDBLOCK,  EINTR, or ETIMEDOUT.  This may be useful in conjunction
                          with [1mPROCINFO["[4m[22minput[24m[1m", "READ_TIMEOUT"] [22mor situations where a  file  descriptor
                          has been configured to behave in a non-blocking fashion.

                   [1mPROCINFO["sorted_in"][0m
                          If this element exists in [1mPROCINFO[22m, then its value controls the order in which
                          array  elements  are  traversed  in   [1mfor   [22mloops.    Supported   values   are
                          [1m"@ind_str_asc"[22m,      [1m"@ind_num_asc"[22m,      [1m"@val_type_asc"[22m,     [1m"@val_str_asc"[22m,
                          [1m"@val_num_asc"[22m,    [1m"@ind_str_desc"[22m,     [1m"@ind_num_desc"[22m,     [1m"@val_type_desc"[22m,
                          [1m"@val_str_desc"[22m,  [1m"@val_num_desc"[22m, and [1m"@unsorted"[22m.  The value can also be the
                          name (as a [4mstring[24m) of any comparison function defined as follows:

                               [1mfunction cmp_func(i1, v1, i2, v2)[0m

                          where [4mi1[24m and [4mi2[24m are the indices, and [4mv1[24m and [4mv2[24m are the corresponding values of
                          the  two  elements being compared.  It should return a number less than, equal
                          to, or greater than 0, depending on how the elements of the array  are  to  be
                          ordered.

       [1mROUNDMODE   [22mThe  rounding  mode  to use for arbitrary precision arithmetic on numbers, by default
                   [1m"N" [22m(IEEE-754 roundTiesToEven  mode).   The  accepted  values  are  [1m"N"  [22mor  [1m"n"  [22mfor
                   roundTiesToEven,  [1m"U" [22mor [1m"u" [22mfor roundTowardPositive, [1m"D" [22mor [1m"d" [22mfor roundTowardNega‚Äê
                   tive, [1m"Z" [22mor [1m"z" [22mfor roundTowardZero, and if your version of GNU  MPFR  library  sup‚Äê
                   ports it, [1m"A" [22mor [1m"a" [22mfor rounding away from zero.

       [1mRS          [22mThe input record separator, by default a newline.

       [1mRT          [22mThe  record terminator.  [4mGawk[24m sets [1mRT [22mto the input text that matched the character or
                   regular expression specified by [1mRS[22m.

       [1mRSTART      [22mThe index of the first character matched by [1mmatch()[22m; 0 if no  match.   (This  implies
                   that character indices start at one.)

       [1mRLENGTH     [22mThe length of the string matched by [1mmatch()[22m; -1 if no match.

       [1mSUBSEP      [22mThe  character  used  to  separate  multiple subscripts in array elements, by default
                   [1m"\034"[22m.

       [1mSYMTAB      [22mAn array whose indices are the names of all currently defined  global  variables  and
                   arrays  in  the  program.  The array may be used for indirect access to read or write
                   the value of a variable:

                        [1mfoo = 5[0m
                        [1mSYMTAB["foo"] = 4[0m
                        [1mprint foo    # prints 4[0m

                   The [1mtypeof() [22mfunction may be used to test if an element in [1mSYMTAB [22mis an  array.   You
                   may not use the [1mdelete [22mstatement with the [1mSYMTAB [22marray.

       [1mTEXTDOMAIN  [22mThe  text  domain of the AWK program; used to find the localized translations for the
                   program's strings.

   [1mArrays[0m
       Arrays are subscripted with an expression between square brackets ([1m[ [22mand [1m][22m).  If  the  expression
       is  an  expression  list ([4mexpr[24m, [4mexpr[24m ...)  then the array subscript is a string consisting of the
       concatenation of the (string) value of each expression, separated by  the  value  of  the  [1mSUBSEP[0m
       variable.  This facility is used to simulate multiply dimensioned arrays.  For example:

              [1mi = "A"; j = "B"; k = "C"[0m
              [1mx[i, j, k] = "hello, world\n"[0m

       assigns  the string [1m"hello, world\n" [22mto the element of the array [1mx [22mwhich is indexed by the string
       [1m"A\034B\034C"[22m.  All arrays in AWK are associative, i.e., indexed by string values.

       The special operator [1min [22mmay be used to test if an array has an index consisting of  a  particular
       value:

              [1mif (val in array)[0m
                   [1mprint array[val][0m

       If the array has multiple subscripts, use [1m(i, j) in array[22m.

       The  [1min  [22mconstruct  may  also be used in a [1mfor [22mloop to iterate over all the elements of an array.
       However, the [1m(i, j) in array [22mconstruct only works in tests, not in [1mfor [22mloops.

       An element may be deleted from an array using the [1mdelete [22mstatement.   The  [1mdelete  [22mstatement  may
       also be used to delete the entire contents of an array, just by specifying the array name without
       a subscript.

       [4mgawk[24m supports true multidimensional arrays. It does not require that such arrays  be  ``rectangu‚Äê
       lar'' as in C or C++.  For example:

              [1ma[1] = 5[0m
              [1ma[2][1] = 6[0m
              [1ma[2][2] = 7[0m

       [1mNOTE[22m:  You  may  need  to tell [4mgawk[24m that an array element is really a subarray in order to use it
       where [4mgawk[24m expects an array (such as in the second argument to [1msplit()[22m).  You can do this by cre‚Äê
       ating an element in the subarray and then deleting it with the [1mdelete [22mstatement.

   [1mVariable Typing And Conversion[0m
       Variables and fields may be (floating point) numbers, or strings, or both.  They may also be reg‚Äê
       ular expressions. How the value of a variable is interpreted depends upon its context.   If  used
       in  a  numeric expression, it will be treated as a number; if used as a string it will be treated
       as a string.

       To force a variable to be treated as a number, add zero to it; to force it to  be  treated  as  a
       string, concatenate it with the null string.

       Uninitialized  variables have the numeric value zero and the string value "" (the null, or empty,
       string).

       When a string must be converted to a number, the conversion is accomplished using  [4mstrtod[24m(3).   A
       number  is converted to a string by using the value of [1mCONVFMT [22mas a format string for [4msprintf[24m(3),
       with the numeric value of the variable as the argument.  However, even though all numbers in  AWK
       are floating-point, integral values are [4malways[24m converted as integers.  Thus, given

              [1mCONVFMT = "%2.2f"[0m
              [1ma = 12[0m
              [1mb = a ""[0m

       the variable [1mb [22mhas a string value of [1m"12" [22mand not [1m"12.00"[22m.

       [1mNOTE[22m: When operating in POSIX mode (such as with the [1m--posix [22moption), beware that locale settings
       may interfere with the way decimal numbers are treated: the decimal separator of the numbers  you
       are  feeding to [4mgawk[24m must conform to what your locale would expect, be it a comma (,) or a period
       (.).

       [4mGawk[24m performs comparisons as follows: If two variables are numeric,  they  are  compared  numeri‚Äê
       cally.  If one value is numeric and the other has a string value that is a ‚Äúnumeric string,‚Äù then
       comparisons are also done numerically.  Otherwise, the numeric value is converted to a string and
       a string comparison is performed.  Two strings are compared, of course, as strings.

       Note  that  string  constants,  such as [1m"57"[22m, are [4mnot[24m numeric strings, they are string constants.
       The idea of ‚Äúnumeric string‚Äù only applies to fields, [1mgetline [22minput, [1mFILENAME[22m, [1mARGV [22melements, [1mENV‚Äê[0m
       [1mIRON  [22melements  and  the  elements  of an array created by [1msplit() [22mor [1mpatsplit() [22mthat are numeric
       strings.  The basic idea is that [4muser[24m [4minput[24m, and only user input, that looks numeric,  should  be
       treated that way.

   [1mOctal and Hexadecimal Constants[0m
       You  may  use C-style octal and hexadecimal constants in your AWK program source code.  For exam‚Äê
       ple, the octal value [1m011 [22mis equal to decimal [1m9[22m, and the hexadecimal value [1m0x11 [22mis equal to  deci‚Äê
       mal 17.

   [1mString Constants[0m
       String  constants  in  AWK  are  sequences  of  characters  enclosed  between double quotes (like
       [1m"value"[22m).  Within strings, certain [4mescape[24m [4msequences[24m are recognized, as in C.  These are:

       [1m\\   [22mA literal backslash.

       [1m\a   [22mThe ‚Äúalert‚Äù character; usually the ASCII BEL character.

       [1m\b   [22mBackspace.

       [1m\f   [22mForm-feed.

       [1m\n   [22mNewline.

       [1m\r   [22mCarriage return.

       [1m\t   [22mHorizontal tab.

       [1m\v   [22mVertical tab.

       [1m\x[4m[22mhex[24m [4mdigits[0m
            The character represented by the string of hexadecimal digits following the [1m\x[22m.  Up  to  two
            following  hexadecimal  digits  are considered part of the escape sequence.  E.g., [1m"\x1B" [22mis
            the ASCII ESC (escape) character.

       [1m\[4m[22mddd[24m The character represented by the 1-, 2-, or 3-digit sequence of octal digits.  E.g.,  [1m"\033"[0m
            is the ASCII ESC (escape) character.

       [1m\[4m[22mc[24m   The literal character [4mc[24m.

       In  compatibility  mode, the characters represented by octal and hexadecimal escape sequences are
       treated literally when used in regular expression constants.   Thus,  [1m/a\52b/  [22mis  equivalent  to
       [1m/a\*b/[22m.

   [1mRegexp Constants[0m
       A  regular expression constant is a sequence of characters enclosed between forward slashes (like
       [1m/value/[22m).  Regular expression matching is described more fully below; see [1mRegular Expressions[22m.

       The escape sequences described earlier may also  be  used  inside  constant  regular  expressions
       (e.g., [1m/[ \t\f\n\r\v]/ [22mmatches whitespace characters).

       [4mGawk[24m   provides  [4mstrongly[24m  [4mtyped[24m regular expression constants. These are written with a leading [1m@[0m
              symbol (like so: [1m@/value/[22m).  Such constants may be assigned to scalars  (variables,  array
              elements)  and passed to user-defined functions. Variables that have been so assigned have
              regular expression type.

[1mPATTERNS AND ACTIONS[0m
       AWK is a line-oriented language.  The pattern comes first, and then the  action.   Action  state‚Äê
       ments  are enclosed in [1m{ [22mand [1m}[22m.  Either the pattern may be missing, or the action may be missing,
       but, of course, not both.  If the pattern is missing, the action executes for every single record
       of input.  A missing action is equivalent to

              [1m{ print }[0m

       which prints the entire record.

       Comments  begin with the [1m# [22mcharacter, and continue until the end of the line.  Empty lines may be
       used to separate statements.  Normally, a statement ends with a newline, however, this is not the
       case for lines ending in a comma, [1m{[22m, [1m?[22m, [1m:[22m, [1m&&[22m, or [1m||[22m.  Lines ending in [1mdo [22mor [1melse [22malso have their
       statements automatically continued on the following line.  In other cases, a line can be  contin‚Äê
       ued by ending it with a ‚Äú\‚Äù, in which case the newline is ignored.

       Multiple  statements  may be put on one line by separating them with a ‚Äú;‚Äù.  This applies to both
       the statements within the action part of a pattern-action pair (the usual case), and to the  pat‚Äê
       tern-action statements themselves.

   [1mPatterns[0m
       AWK patterns may be one of the following:

              [1mBEGIN[0m
              [1mEND[0m
              [1mBEGINFILE[0m
              [1mENDFILE[0m
              [1m/[4m[22mregular[24m [4mexpression[24m[1m/[0m
              [4mrelational[24m [4mexpression[0m
              [4mpattern[24m [1m&& [4m[22mpattern[0m
              [4mpattern[24m [1m|| [4m[22mpattern[0m
              [4mpattern[24m [1m? [4m[22mpattern[24m [1m: [4m[22mpattern[0m
              [1m([4m[22mpattern[24m[1m)[0m
              [1m! [4m[22mpattern[0m
              [4mpattern1[24m[1m, [4m[22mpattern2[0m

       [1mBEGIN  [22mand  [1mEND  [22mare  two  special kinds of patterns which are not tested against the input.  The
       action parts of all [1mBEGIN [22mpatterns are merged as if all the statements had been written in a sin‚Äê
       gle [1mBEGIN [22mrule.  They are executed before any of the input is read.  Similarly, all the [1mEND [22mrules
       are merged, and executed when all the input is exhausted (or when an [1mexit [22mstatement is executed).
       [1mBEGIN  [22mand [1mEND [22mpatterns cannot be combined with other patterns in pattern expressions.  [1mBEGIN [22mand
       [1mEND [22mpatterns cannot have missing action parts.

       [1mBEGINFILE [22mand [1mENDFILE [22mare additional special patterns whose bodies are  executed  before  reading
       the  first record of each command line input file and after reading the last record of each file.
       Inside the [1mBEGINFILE [22mrule, the value of [1mERRNO [22mis the empty string if the file was opened success‚Äê
       fully.   Otherwise,  there is some problem with the file and the code should use [1mnextfile [22mto skip
       it. If that is not done, [4mgawk[24m produces its usual fatal error for files that cannot be opened.

       For [1m/[4m[22mregular[24m [4mexpression[24m[1m/ [22mpatterns, the associated statement is executed  for  each  input  record
       that  matches the regular expression.  Regular expressions are the same as those in [4megrep[24m(1), and
       are summarized below.

       A [4mrelational[24m [4mexpression[24m may use any of the operators defined below in  the  section  on  actions.
       These generally test whether certain fields match certain regular expressions.

       The [1m&&[22m, [1m||[22m, and [1m!  [22moperators are logical AND, logical OR, and logical NOT, respectively, as in C.
       They do short-circuit evaluation, also as in C, and are used for combining more primitive pattern
       expressions.  As in most languages, parentheses may be used to change the order of evaluation.

       The  [1m?:  [22moperator  is like the same operator in C.  If the first pattern is true then the pattern
       used for testing is the second pattern, otherwise it is the third.  Only one of  the  second  and
       third patterns is evaluated.

       The  [4mpattern1[24m[1m,  [4m[22mpattern2[24m  form  of an expression is called a [4mrange[24m [4mpattern[24m.  It matches all input
       records starting with a record that matches [4mpattern1[24m, and continuing until a record that  matches
       [4mpattern2[24m, inclusive.  It does not combine with any other sort of pattern expression.

   [1mRegular Expressions[0m
       Regular  expressions  are  the  extended kind found in [4megrep[24m.  They are composed of characters as
       follows:

       [4mc[24m          Matches the non-metacharacter [4mc[24m.

       [4m\c[24m         Matches the literal character [4mc[24m.

       [1m.          [22mMatches any character [4mincluding[24m newline.

       [1m^          [22mMatches the beginning of a string.

       [1m$          [22mMatches the end of a string.

       [1m[[4m[22mabc...[24m[1m]   [22mA character list: matches any of the characters [4mabc...[24m.  You may include  a  range  of
                  characters by separating them with a dash.

       [1m[^[4m[22mabc...[24m[1m]  [22mA negated character list: matches any character except [4mabc...[24m.

       [4mr1[24m[1m|[4m[22mr2[24m      Alternation: matches either [4mr1[24m or [4mr2[24m.

       [4mr1r2[24m       Concatenation: matches [4mr1[24m, and then [4mr2[24m.

       [4mr[24m[1m+         [22mMatches one or more [4mr[24m's.

       [4mr[24m[1m*         [22mMatches zero or more [4mr[24m's.

       [4mr[24m[1m?         [22mMatches zero or one [4mr[24m's.

       [1m([4m[22mr[24m[1m)        [22mGrouping: matches [4mr[24m.

       [4mr[24m[1m{[4m[22mn[24m[1m}[0m
       [4mr[24m[1m{[4m[22mn[24m[1m,}[0m
       [4mr[24m[1m{[4m[22mn[24m[1m,[4m[22mm[24m[1m}     [22mOne  or two numbers inside braces denote an [4minterval[24m [4mexpression[24m.  If there is one num‚Äê
                  ber in the braces, the preceding regular expression [4mr[24m is repeated [4mn[24m times.   If  there
                  are  two  numbers  separated  by a comma, [4mr[24m is repeated [4mn[24m to [4mm[24m times.  If there is one
                  number followed by a comma, then [4mr[24m is repeated at least [4mn[24m times.

       [1m\y         [22mMatches the empty string at either the beginning or the end of a word.

       [1m\B         [22mMatches the empty string within a word.

       [1m\<         [22mMatches the empty string at the beginning of a word.

       [1m\>         [22mMatches the empty string at the end of a word.

       [1m\s         [22mMatches any whitespace character.

       [1m\S         [22mMatches any nonwhitespace character.

       [1m\w         [22mMatches any word-constituent character (letter, digit, or underscore).

       [1m\W         [22mMatches any character that is not word-constituent.

       [1m\`         [22mMatches the empty string at the beginning of a buffer (string).

       [1m\'         [22mMatches the empty string at the end of a buffer.

       The escape sequences that are valid in string constants (see [1mString Constants[22m) are also valid  in
       regular expressions.

       [4mCharacter[24m [4mclasses[24m are a feature introduced in the POSIX standard.  A character class is a special
       notation for describing lists of characters that have a specific attribute, but where the  actual
       characters  themselves  can  vary  from country to country and/or from character set to character
       set.  For example, the notion of what is an alphabetic  character  differs  in  the  USA  and  in
       France.

       A  character class is only valid in a regular expression [4minside[24m the brackets of a character list.
       Character classes consist of [1m[:[22m, a keyword denoting the class, and  [1m:][22m.   The  character  classes
       defined by the POSIX standard are:

       [1m[:alnum:]  [22mAlphanumeric characters.

       [1m[:alpha:]  [22mAlphabetic characters.

       [1m[:blank:]  [22mSpace or tab characters.

       [1m[:cntrl:]  [22mControl characters.

       [1m[:digit:]  [22mNumeric characters.

       [1m[:graph:]  [22mCharacters  that are both printable and visible.  (A space is printable, but not visi‚Äê
                  ble, while an [1ma [22mis both.)

       [1m[:lower:]  [22mLowercase alphabetic characters.

       [1m[:print:]  [22mPrintable characters (characters that are not control characters.)

       [1m[:punct:]  [22mPunctuation characters (characters that are not letter, digits, control characters, or
                  space characters).

       [1m[:space:]  [22mSpace characters (such as space, tab, and formfeed, to name a few).

       [1m[:upper:]  [22mUppercase alphabetic characters.

       [1m[:xdigit:] [22mCharacters that are hexadecimal digits.

       For  example,  before the POSIX standard, to match alphanumeric characters, you would have had to
       write [1m/[A-Za-z0-9]/[22m.  If your character set had other alphabetic characters in it, this would not
       match  them, and if your character set collated differently from ASCII, this might not even match
       the  ASCII  alphanumeric  characters.   With  the  POSIX  character  classes,   you   can   write
       [1m/[[:alnum:]]/[22m,  and  this matches the alphabetic and numeric characters in your character set, no
       matter what it is.

       Two additional special sequences can appear in character lists.  These apply to non-ASCII charac‚Äê
       ter  sets,  which  can  have single symbols (called [4mcollating[24m [4melements[24m) that are represented with
       more than one character, as well as several characters that  are  equivalent  for  [4mcollating[24m,  or
       sorting, purposes.  (E.g., in French, a plain ‚Äúe‚Äù and a grave-accented ‚Äúe`‚Äù are equivalent.)

       Collating Symbols
              A  collating  symbol  is  a multi-character collating element enclosed in [1m[.  [22mand [1m.][22m.  For
              example, if [1mch [22mis a collating element, then [1m[[.ch.]]  [22mis a regular expression that matches
              this collating element, while [1m[ch] [22mis a regular expression that matches either [1mc [22mor [1mh[22m.

       Equivalence Classes
              An  equivalence  class is a locale-specific name for a list of characters that are equiva‚Äê
              lent.  The name is enclosed in [1m[= [22mand [1m=][22m.  For example, the name [1me [22mmight be used to repre‚Äê
              sent all of ‚Äúe‚Äù, ‚Äúe¬¥‚Äù, and ‚Äúe`‚Äù.  In this case, [1m[[=e=]] [22mis a regular expression that matches
              any of [1me[22m, [1me¬¥[22m, or [1me`[22m.

       These features are very valuable in non-English speaking locales.   The  library  functions  that
       [4mgawk[24m  uses for regular expression matching currently only recognize POSIX character classes; they
       do not recognize collating symbols or equivalence classes.

       The [1m\y[22m, [1m\B[22m, [1m\<[22m, [1m\>[22m, [1m\s[22m, [1m\S[22m, [1m\w[22m, [1m\W[22m, [1m\`[22m, and [1m\' [22moperators are specific to [4mgawk[24m;  they  are  exten‚Äê
       sions based on facilities in the GNU regular expression libraries.

       The various command line options control how [4mgawk[24m interprets characters in regular expressions.

       No options
              In the default case, [4mgawk[24m provides all the facilities of POSIX regular expressions and the
              GNU regular expression operators described above.

       [1m--posix[0m
              Only POSIX regular expressions are supported, the GNU operators are not  special.   (E.g.,
              [1m\w [22mmatches a literal [1mw[22m).

       [1m--traditional[0m
              Traditional  UNIX [4mawk[24m regular expressions are matched.  The GNU operators are not special,
              and interval expressions are not available.  Characters described by octal and hexadecimal
              escape  sequences  are  treated  literally,  even  if  they  represent  regular expression
              metacharacters.

       [1m--re-interval[0m
              Allow interval expressions in regular expressions, even if  [1m--traditional  [22mhas  been  pro‚Äê
              vided.

   [1mActions[0m
       Action  statements  are  enclosed  in  braces,  [1m{  [22mand [1m}[22m.  Action statements consist of the usual
       assignment, conditional, and looping statements found in most languages.  The operators,  control
       statements, and input/output statements available are patterned after those in C.

   [1mOperators[0m
       The operators in AWK, in order of decreasing precedence, are:

       [1m([22m...[1m)       [22mGrouping

       [1m$           [22mField reference.

       [1m++ --       [22mIncrement and decrement, both prefix and postfix.

       [1m^           [22mExponentiation ([1m** [22mmay also be used, and [1m**= [22mfor the assignment operator).

       [1m+ - !       [22mUnary plus, unary minus, and logical negation.

       [1m* / %       [22mMultiplication, division, and modulus.

       [1m+ -         [22mAddition and subtraction.

       [4mspace[24m       String concatenation.

       [1m|   |&      [22mPiped I/O for [1mgetline[22m, [1mprint[22m, and [1mprintf[22m.

       [1m< > <= >= == !=[0m
                   The regular relational operators.

       [1m~ !~        [22mRegular expression match, negated match.  [1mNOTE[22m: Do not use a constant regular expres‚Äê
                   sion ([1m/foo/[22m) on the left-hand side of a [1m~ [22mor [1m!~[22m.  Only  use  one  on  the  right-hand
                   side.  The expression [1m/foo/ ~ [4m[22mexp[24m has the same meaning as [1m(($0 ~ /foo/) ~ [4m[22mexp[24m[1m)[22m.  This
                   is usually [4mnot[24m what you want.

       [1min          [22mArray membership.

       [1m&&          [22mLogical AND.

       [1m||          [22mLogical OR.

       [1m?:          [22mThe C conditional expression.  This has the form [4mexpr1[24m [1m? [4m[22mexpr2[24m [1m: [4m[22mexpr3[24m.  If [4mexpr1[24m  is
                   true, the value of the expression is [4mexpr2[24m, otherwise it is [4mexpr3[24m.  Only one of [4mexpr2[0m
                   and [4mexpr3[24m is evaluated.

       [1m= += -= *= /= %= ^=[0m
                   Assignment.  Both absolute assignment [1m([4m[22mvar[24m  [1m=  [4m[22mvalue[24m[1m)  [22mand  operator-assignment  (the
                   other forms) are supported.

   [1mControl Statements[0m
       The control statements are as follows:

              [1mif ([4m[22mcondition[24m[1m) [4m[22mstatement[24m [ [1melse [4m[22mstatement[24m ]
              [1mwhile ([4m[22mcondition[24m[1m) [4m[22mstatement[0m
              [1mdo [4m[22mstatement[24m [1mwhile ([4m[22mcondition[24m[1m)[0m
              [1mfor ([4m[22mexpr1[24m[1m; [4m[22mexpr2[24m[1m; [4m[22mexpr3[24m[1m) [4m[22mstatement[0m
              [1mfor ([4m[22mvar[24m [1min [4m[22marray[24m[1m) [4m[22mstatement[0m
              [1mbreak[0m
              [1mcontinue[0m
              [1mdelete [4m[22marray[24m[1m[[4m[22mindex[24m[1m][0m
              [1mdelete [4m[22marray[0m
              [1mexit [22m[ [4mexpression[24m ]
              [1m{ [4m[22mstatements[24m [1m}[0m
              [1mswitch ([4m[22mexpression[24m[1m) {[0m
              [1mcase [4m[22mvalue[24m[1m|[4m[22mregex[24m [1m: [4m[22mstatement[0m
              [4m...[0m
              [ [1mdefault: [4m[22mstatement[24m ]
              [1m}[0m

   [1mI/O Statements[0m
       The input/output statements are as follows:

       [1mclose([4m[22mfile[24m [[1m, [4m[22mhow[24m][1m)   [22mClose  file,  pipe or coprocess.  The optional [4mhow[24m should only be used when
                             closing one end of a two-way pipe to a coprocess.   It  must  be  a  string
                             value, either [1m"to" [22mor [1m"from"[22m.

       [1mgetline               [22mSet [1m$0 [22mfrom next input record; set [1mNF[22m, [1mNR[22m, [1mFNR[22m, [1mRT[22m.

       [1mgetline <[4m[22mfile[24m         Set [1m$0 [22mfrom next record of [4mfile[24m; set [1mNF[22m, [1mRT[22m.

       [1mgetline [4m[22mvar[24m           Set [4mvar[24m from next input record; set [1mNR[22m, [1mFNR[22m, [1mRT[22m.

       [1mgetline [4m[22mvar[24m [1m<[4m[22mfile[24m     Set [4mvar[24m from next record of [4mfile[24m, [1mRT[22m.

       [4mcommand[24m [1m| getline [22m[[4mvar[24m]
                             Run [4mcommand[24m piping the output either into [1m$0 [22mor [4mvar[24m, as above, and [1mRT[22m.

       [4mcommand[24m [1m|& getline [22m[[4mvar[24m]
                             Run  [4mcommand[24m  as  a  coprocess  piping the output either into [1m$0 [22mor [4mvar[24m, as
                             above, and [1mRT[22m.  Coprocesses are a [4mgawk[24m extension.  ([4mcommand[24m can also  be  a
                             socket.  See the subsection [1mSpecial File Names[22m, below.)

       [1mnext                  [22mStop  processing  the  current input record.  The next input record is read
                             and processing starts over with the first pattern in the AWK program.  Upon
                             reaching the end of the input data, [4mgawk[24m executes any [1mEND [22mrule(s).

       [1mnextfile              [22mStop  processing  the current input file.  The next input record read comes
                             from the next input file.  [1mFILENAME [22mand [1mARGIND [22mare updated, [1mFNR [22mis reset to
                             1,  and  processing  starts over with the first pattern in the AWK program.
                             Upon reaching the end of the input data, [4mgawk[24m executes any [1mENDFILE [22mand  [1mEND[0m
                             rule(s).

       [1mprint                 [22mPrint  the  current record.  The output record is terminated with the value
                             of [1mORS[22m.

       [1mprint [4m[22mexpr-list[24m       Print expressions.  Each expression is separated by the value of [1mOFS[22m.   The
                             output record is terminated with the value of [1mORS[22m.

       [1mprint [4m[22mexpr-list[24m [1m>[4m[22mfile[24m Print  expressions  on  [4mfile[24m.  Each expression is separated by the value of
                             [1mOFS[22m.  The output record is terminated with the value of [1mORS[22m.

       [1mprintf [4m[22mfmt,[24m [4mexpr-list[24m Format and print.  See [1mThe [4m[22mprintf[24m [1mStatement[22m, below.

       [1mprintf [4m[22mfmt,[24m [4mexpr-list[24m [1m>[4m[22mfile[0m
                             Format and print on [4mfile[24m.

       [1msystem([4m[22mcmd-line[24m[1m)      [22mExecute the command [4mcmd-line[24m, and return the exit status.  (This may not be
                             available  on  non-POSIX systems.)  See [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m for
                             the full details on the exit status.

       [1mfflush([22m[[4mfile[24m][1m)        [22mFlush any buffers associated with the open output file or  pipe  [4mfile[24m.   If
                             [4mfile[24m  is  missing  or  if it is the null string, then flush all open output
                             files and pipes.

       Additional output redirections are allowed for [1mprint [22mand [1mprintf[22m.

       [1mprint ... >> [4m[22mfile[0m
              Appends output to the [4mfile[24m.

       [1mprint ... | [4m[22mcommand[0m
              Writes on a pipe.

       [1mprint ... |& [4m[22mcommand[0m
              Sends data to a coprocess or socket.  (See also the subsection [1mSpecial File Names[22m, below.)

       The [1mgetline [22mcommand returns 1 on success, zero on end of file,  and  -1  on  an  error.   If  the
       [4merrno[24m(3) value indicates that the I/O operation may be retried, and [1mPROCINFO["[4m[22minput[24m[1m", "RETRY"] [22mis
       set, then -2 is returned instead of -1, and further calls to [1mgetline [22mmay be attempted.   Upon  an
       error, [1mERRNO [22mis set to a string describing the problem.

       [1mNOTE[22m:  Failure  in  opening  a  two-way socket results in a non-fatal error being returned to the
       calling function. If using a pipe, coprocess, or socket to  [1mgetline[22m,  or  from  [1mprint  [22mor  [1mprintf[0m
       within  a  loop, you [4mmust[24m use [1mclose() [22mto create new instances of the command or socket.  AWK does
       not automatically close pipes, sockets, or coprocesses when they return EOF.

   [1mThe [4m[22mprintf[24m [1mStatement[0m
       The AWK versions of the [1mprintf [22mstatement and [1msprintf() [22mfunction (see below) accept the  following
       conversion specification formats:

       [1m%a[22m, [1m%A  [22mA floating point number of the form [[1m-[22m][1m0x[4m[22mh[24m[1m.[4m[22mhhhh[24m[1mp+-[4m[22mdd[24m (C99 hexadecimal floating point for‚Äê
               mat).  For [1m%A[22m, uppercase letters are used instead of lowercase ones.

       [1m%c      [22mA single character.  If the argument used for [1m%c [22mis numeric, it is treated as a character
               and printed.  Otherwise, the argument is assumed to be a string, and the only first char‚Äê
               acter of that string is printed.

       [1m%d[22m, [1m%i  [22mA decimal number (the integer part).

       [1m%e[22m, [1m%E  [22mA floating point number of the form [[1m-[22m][4md[24m[1m.[4m[22mdddddd[24m[1me[22m[[1m+-[22m][4mdd[24m.  The [1m%E [22mformat uses [1mE [22minstead  of
               [1me[22m.

       [1m%f[22m, [1m%F  [22mA floating point number of the form [[1m-[22m][4mddd[24m[1m.[4m[22mdddddd[24m.  If the system library supports it, [1m%F[0m
               is available as well. This is like [1m%f[22m, but uses capital letters for special ‚Äúnot  a  num‚Äê
               ber‚Äù and ‚Äúinfinity‚Äù values. If [1m%F [22mis not available, [4mgawk[24m uses [1m%f[22m.

       [1m%g[22m, [1m%G  [22mUse [1m%e [22mor [1m%f [22mconversion, whichever is shorter, with nonsignificant zeros suppressed.  The
               [1m%G [22mformat uses [1m%E [22minstead of [1m%e[22m.

       [1m%o      [22mAn unsigned octal number (also an integer).

       [1m%u      [22mAn unsigned decimal number (again, an integer).

       [1m%s      [22mA character string.

       [1m%x[22m, [1m%X  [22mAn unsigned hexadecimal number (an integer).   The  [1m%X  [22mformat  uses  [1mABCDEF  [22minstead  of
               [1mabcdef[22m.

       [1m%%      [22mA single [1m% [22mcharacter; no argument is converted.

       Optional, additional parameters may lie between the [1m% [22mand the control letter:

       [4mcount[24m[1m$ [22mUse  the  [4mcount[24m'th  argument at this point in the formatting.  This is called a [4mpositional[0m
              [4mspecifier[24m and is intended primarily for use in translated versions of format strings,  not
              in the original text of an AWK program.  It is a [4mgawk[24m extension.

       [1m-      [22mThe expression should be left-justified within its field.

       [4mspace[24m  For  numeric  conversions, prefix positive values with a space, and negative values with a
              minus sign.

       [1m+      [22mThe plus sign, used before the width modifier (see below), says to always  supply  a  sign
              for  numeric  conversions,  even if the data to be formatted is positive.  The [1m+ [22moverrides
              the space modifier.

       [1m#      [22mUse an ‚Äúalternate form‚Äù for certain control letters.  For [1m%o[22m, supply a leading zero.   For
              [1m%x[22m,  and  [1m%X[22m,  supply a leading [1m0x [22mor [1m0X [22mfor a nonzero result.  For [1m%e[22m, [1m%E[22m, [1m%f [22mand [1m%F[22m, the
              result always contains a decimal point.  For [1m%g[22m, and [1m%G[22m, trailing zeros  are  not  removed
              from the result.

       [1m0      [22mA  leading  [1m0  [22m(zero)  acts as a flag, indicating that output should be padded with zeroes
              instead of spaces.  This applies only to the numeric output formats.  This flag  only  has
              an effect when the field width is wider than the value to be printed.

       [1m'      [22mA single quote character instructs [4mgawk[24m to insert the locale's thousands-separator charac‚Äê
              ter into decimal numbers, and to also use the locale's decimal point character with float‚Äê
              ing point formats.  This requires correct locale support in the C library and in the defi‚Äê
              nition of the current locale.

       [4mwidth[24m  The field should be padded to this width.  The field is normally padded with spaces.  With
              the [1m0 [22mflag, it is padded with zeroes.

       [1m.[4m[22mprec[24m  A  number  that  specifies the precision to use when printing.  For the [1m%e[22m, [1m%E[22m, [1m%f [22mand [1m%F[22m,
              formats, this specifies the number of digits you want printed to the right of the  decimal
              point.  For the [1m%g[22m, and [1m%G [22mformats, it specifies the maximum number of significant digits.
              For the [1m%d[22m, [1m%i[22m, [1m%o[22m, [1m%u[22m, [1m%x[22m, and [1m%X [22mformats, it specifies the minimum number of  digits  to
              print.   For [1m%s[22m, it specifies the maximum number of characters from the string that should
              be printed.

       The dynamic [4mwidth[24m and [4mprec[24m capabilities of the ISO C [1mprintf() [22mroutines are  supported.   A  [1m*  [22min
       place  of  either the [4mwidth[24m or [4mprec[24m specifications causes their values to be taken from the argu‚Äê
       ment list to [1mprintf [22mor [1msprintf()[22m.  To use a positional specifier with a dynamic width  or  preci‚Äê
       sion, supply the [4mcount[24m[1m$ [22mafter the [1m* [22min the format string.  For example, [1m"%3$*2$.*1$s"[22m.

   [1mSpecial File Names[0m
       When  doing  I/O redirection from either [1mprint [22mor [1mprintf [22minto a file, or via [1mgetline [22mfrom a file,
       [4mgawk[24m recognizes certain special filenames internally.  These filenames allow access to open  file
       descriptors  inherited from [4mgawk[24m's parent process (usually the shell).  These file names may also
       be used on the command line to name data files.  The filenames are:

       [1m-           [22mThe standard input.

       [1m/dev/stdin  [22mThe standard input.

       [1m/dev/stdout [22mThe standard output.

       [1m/dev/stderr [22mThe standard error output.

       [1m/dev/fd/[4m[22mn[24m   The file associated with the open file descriptor [4mn[24m.

       These are particularly useful for error messages.  For example:

              [1mprint "You blew it!" > "/dev/stderr"[0m

       whereas you would otherwise have to use

              [1mprint "You blew it!" | "cat 1>&2"[0m

       The following special filenames may be used with the [1m|& [22mcoprocess operator  for  creating  TCP/IP
       network connections:

       [1m/inet/tcp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
       [1m/inet4/tcp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
       [1m/inet6/tcp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
              Files  for  a  TCP/IP  connection  on local port [4mlport[24m to remote host [4mrhost[24m on remote port
              [4mrport[24m.  Use a port of [1m0 [22mto have the system pick a port.  Use [1m/inet4 [22mto force an IPv4  con‚Äê
              nection,  and  [1m/inet6  [22mto  force  an IPv6 connection.  Plain [1m/inet [22muses the system default
              (most likely IPv4).

       [1m/inet/udp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
       [1m/inet4/udp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
       [1m/inet6/udp/[4m[22mlport[24m[1m/[4m[22mrhost[24m[1m/[4m[22mrport[0m
              Similar, but use UDP/IP instead of TCP/IP.

   [1mNumeric Functions[0m
       AWK has the following built-in arithmetic functions:

       [1matan2([4m[22my[24m[1m, [4m[22mx[24m[1m)   [22mReturn the arctangent of [4my/x[24m in radians.

       [1mcos([4m[22mexpr[24m[1m)     [22mReturn the cosine of [4mexpr[24m, which is in radians.

       [1mexp([4m[22mexpr[24m[1m)     [22mThe exponential function.

       [1mint([4m[22mexpr[24m[1m)     [22mTruncate to integer.

       [1mlog([4m[22mexpr[24m[1m)     [22mThe natural logarithm function.

       [1mrand()        [22mReturn a random number [4mN[24m, between zero and one, such that 0 ‚â§ [4mN[24m < 1.

       [1msin([4m[22mexpr[24m[1m)     [22mReturn the sine of [4mexpr[24m, which is in radians.

       [1msqrt([4m[22mexpr[24m[1m)    [22mReturn the square root of [4mexpr[24m.

       [1msrand([22m[[4mexpr[24m][1m) [22mUse [4mexpr[24m as the new seed for the random number generator.  If no [4mexpr[24m is  provided,
                     use the time of day.  Return the previous seed for the random number generator.

   [1mString Functions[0m
       [4mGawk[24m has the following built-in string functions:

       [1masort([4m[22ms[24m [[1m, [4m[22md[24m [[1m, [4m[22mhow[24m] ][1m) [22mReturn  the  number of elements in the source array [4ms[24m.  Sort the contents
                               of [4ms[24m using [4mgawk[24m's normal rules for  comparing  values,  and  replace  the
                               indices  of the sorted values [4ms[24m with sequential integers starting with 1.
                               If the optional destination array [4md[24m is specified, first duplicate [4ms[24m  into
                               [4md[24m,  and then sort [4md[24m, leaving the indices of the source array [4ms[24m unchanged.
                               The optional string [4mhow[24m controls the direction and the  comparison  mode.
                               Valid   values   for   [4mhow[24m   are   any   of   the   strings   valid   for
                               [1mPROCINFO["sorted_in"][22m.  It can also be the name of a user-defined compar‚Äê
                               ison function as described in [1mPROCINFO["sorted_in"][22m.

       [1masorti([4m[22ms[24m [[1m, [4m[22md[24m [[1m, [4m[22mhow[24m] ][1m)[0m
                               Return the number of elements in the source array [4ms[24m.  The behavior is the
                               same as that of [1masort()[22m, except that the array [4mindices[24m are used for sort‚Äê
                               ing,  not the array values.  When done, the array is indexed numerically,
                               and the values are those of the original indices.   The  original  values
                               are  lost; thus provide a second array if you wish to preserve the origi‚Äê
                               nal.  The purpose of the optional string [4mhow[24m is  the  same  as  described
                               previously for [1masort()[22m.

       [1mgensub([4m[22mr[24m[1m, [4m[22ms[24m[1m, [4m[22mh[24m [[1m, [4m[22mt[24m][1m)   [22mSearch the target string [4mt[24m for matches of the regular expression [4mr[24m.  If [4mh[0m
                               is a string beginning with [1mg [22mor [1mG[22m, then replace all matches of [4mr[24m with  [4ms[24m.
                               Otherwise, [4mh[24m is a number indicating which match of [4mr[24m to replace.  If [4mt[24m is
                               not supplied, use  [1m$0  [22minstead.   Within  the  replacement  text  [4ms[24m,  the
                               sequence [1m\[4m[22mn[24m, where [4mn[24m is a digit from 1 to 9, may be used to indicate just
                               the text that matched the [4mn[24m'th parenthesized subexpression.  The sequence
                               [1m\0  [22mrepresents  the entire matched text, as does the character [1m&[22m.  Unlike
                               [1msub() [22mand [1mgsub()[22m, the modified string is returned as the  result  of  the
                               function, and the original target string is [4mnot[24m changed.

       [1mgsub([4m[22mr[24m[1m, [4m[22ms[24m [[1m, [4m[22mt[24m][1m)        [22mFor  each  substring  matching  the regular expression [4mr[24m in the string [4mt[24m,
                               substitute the string [4ms[24m, and return the number of substitutions.  If [4mt[24m is
                               not  supplied, use [1m$0[22m.  An [1m& [22min the replacement text is replaced with the
                               text that was actually matched.  Use [1m\& [22mto get a literal [1m&[22m.   (This  must
                               be  typed as [1m"\\&"[22m; see [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m for a fuller dis‚Äê
                               cussion of the rules for ampersands and backslashes  in  the  replacement
                               text of [1msub()[22m, [1mgsub()[22m, and [1mgensub()[22m.)

       [1mindex([4m[22ms[24m[1m, [4m[22mt[24m[1m)             [22mReturn  the  index  of  the string [4mt[24m in the string [4ms[24m, or zero if [4mt[24m is not
                               present.  (This implies that character indices start at one.)   It  is  a
                               fatal error to use a regexp constant for [4mt[24m.

       [1mlength([22m[[4ms[24m][1m)             [22mReturn  the  length of the string [4ms[24m, or the length of [1m$0 [22mif [4ms[24m is not sup‚Äê
                               plied.  As a non-standard extension, with  an  array  argument,  [1mlength()[0m
                               returns the number of elements in the array.

       [1mmatch([4m[22ms[24m[1m, [4m[22mr[24m [[1m, [4m[22ma[24m][1m)       [22mReturn  the  position in [4ms[24m where the regular expression [4mr[24m occurs, or zero
                               if [4mr[24m is not present, and set the values of [1mRSTART [22mand [1mRLENGTH[22m.  Note that
                               the argument order is the same as for the [1m~ [22moperator: [4mstr[24m [1m~ [4m[22mre[24m.  If array
                               [4ma[24m is provided, [4ma[24m is cleared and then elements 1 through [4mn[24m are filled with
                               the  portions  of [4ms[24m that match the corresponding parenthesized subexpres‚Äê
                               sion in [4mr[24m.  The zero'th element of [4ma[24m contains the portion of [4ms[24m matched by
                               the  entire  regular  expression  [4mr[24m.   Subscripts [1ma[[4m[22mn[24m[1m, "start"][22m, and [1ma[[4m[22mn[24m[1m,[0m
                               [1m"length"] [22mprovide the starting index in the  string  and  length  respec‚Äê
                               tively, of each matching substring.

       [1mpatsplit([4m[22ms[24m[1m, [4m[22ma[24m [[1m, [4m[22mr[24m [[1m, [4m[22mseps[24m] ][1m)[0m
                               Split  the string [4ms[24m into the array [4ma[24m and the separators array [4mseps[24m on the
                               regular expression [4mr[24m, and return the number of  fields.   Element  values
                               are the portions of [4ms[24m that matched [4mr[24m.  The value of [1mseps[[4m[22mi[24m[1m] [22mis the possi‚Äê
                               bly null separator that appeared after [1ma[[4m[22mi[24m[1m][22m.  The value of [1mseps[0] [22mis the
                               possibly  null leading separator.  If [4mr[24m is omitted, [1mFPAT [22mis used instead.
                               The arrays [4ma[24m and [4mseps[24m are cleared first.  Splitting  behaves  identically
                               to field splitting with [1mFPAT[22m, described above.

       [1msplit([4m[22ms[24m[1m, [4m[22ma[24m [[1m, [4m[22mr[24m [[1m, [4m[22mseps[24m] ][1m)[0m
                               Split  the string [4ms[24m into the array [4ma[24m and the separators array [4mseps[24m on the
                               regular expression [4mr[24m, and return the number of fields.  If [4mr[24m is  omitted,
                               [1mFS [22mis used instead.  The arrays [4ma[24m and [4mseps[24m are cleared first.  [1mseps[[4m[22mi[24m[1m] [22mis
                               the field separator matched by [4mr[24m between [1ma[[4m[22mi[24m[1m] [22mand [1ma[[4m[22mi[24m[1m+1][22m.  If [4mr[24m is a sin‚Äê
                               gle space, then leading whitespace in [4ms[24m goes into the extra array element
                               [1mseps[0] [22mand  trailing  whitespace  goes  into  the  extra  array  element
                               [1mseps[[4m[22mn[24m[1m][22m,  where [4mn[24m is the return value of [1msplit([4m[22ms[24m[1m, [4m[22ma[24m[1m, [4m[22mr[24m[1m, [4m[22mseps[24m[1m)[22m.  Splitting
                               behaves identically to field splitting, described above.

       [1msprintf([4m[22mfmt[24m[1m, [4m[22mexpr-list[24m[1m) [22mPrint [4mexpr-list[24m according to [4mfmt[24m, and return the resulting string.

       [1mstrtonum([4m[22mstr[24m[1m)           [22mExamine [4mstr[24m, and return its numeric value.  If [4mstr[24m begins with a  leading
                               [1m0[22m,  treat  it as an octal number.  If [4mstr[24m begins with a leading [1m0x [22mor [1m0X[22m,
                               treat it as a hexadecimal number.  Otherwise, assume it is a decimal num‚Äê
                               ber.

       [1msub([4m[22mr[24m[1m, [4m[22ms[24m [[1m, [4m[22mt[24m][1m)         [22mJust  like [1mgsub()[22m, but replace only the first matching substring.  Return
                               either zero or one.

       [1msubstr([4m[22ms[24m[1m, [4m[22mi[24m [[1m, [4m[22mn[24m][1m)      [22mReturn the at most [4mn[24m-character substring of [4ms[24m starting at  [4mi[24m.   If  [4mn[24m  is
                               omitted, use the rest of [4ms[24m.

       [1mtolower([4m[22mstr[24m[1m)            [22mReturn a copy of the string [4mstr[24m, with all the uppercase characters in [4mstr[0m
                               translated to their corresponding lowercase counterparts.  Non-alphabetic
                               characters are left unchanged.

       [1mtoupper([4m[22mstr[24m[1m)            [22mReturn a copy of the string [4mstr[24m, with all the lowercase characters in [4mstr[0m
                               translated to their corresponding uppercase counterparts.  Non-alphabetic
                               characters are left unchanged.

       [4mGawk[24m  is  multibyte  aware.   This means that [1mindex()[22m, [1mlength()[22m, [1msubstr() [22mand [1mmatch() [22mall work in
       terms of characters, not bytes.

   [1mTime Functions[0m
       Since one of the primary uses of AWK programs is processing log files  that  contain  time  stamp
       information, [4mgawk[24m provides the following functions for obtaining time stamps and formatting them.

       [1mmktime([4m[22mdatespec[24m [[1m, [4m[22mutc-flag[24m][1m)[0m
                 Turn  [4mdatespec[24m  into a time stamp of the same form as returned by [1msystime()[22m, and return
                 the result.  The [4mdatespec[24m is a string of the form [4mYYYY[24m [4mMM[24m [4mDD[24m [4mHH[24m [4mMM[24m [4mSS[[24m [4mDST][24m.  The  con‚Äê
                 tents  of  the  string are six or seven numbers representing respectively the full year
                 including century, the month from 1 to 12, the day of the month from 1 to 31, the  hour
                 of  the  day  from  0  to  23, the minute from 0 to 59, the second from 0 to 60, and an
                 optional daylight saving flag.  The values of these numbers  need  not  be  within  the
                 ranges specified; for example, an hour of -1 means 1 hour before midnight.  The origin-
                 zero Gregorian calendar is assumed, with year 0 preceding year 1 and year -1  preceding
                 year  0.  If [4mutc-flag[24m is present and is non-zero or non-null, the time is assumed to be
                 in the UTC time zone; otherwise, the time is assumed to be in the local time zone.   If
                 the  [4mDST[24m  daylight  saving  flag is positive, the time is assumed to be daylight saving
                 time; if zero, the time is assumed to be standard time; and if negative (the  default),
                 [1mmktime() [22mattempts to determine whether daylight saving time is in effect for the speci‚Äê
                 fied time.  If [4mdatespec[24m does not contain enough elements or if the  resulting  time  is
                 out of range, [1mmktime() [22mreturns -1.

       [1mstrftime([22m[[4mformat[24m [[1m, [4m[22mtimestamp[24m[[1m, [4m[22mutc-flag[24m]]][1m)[0m
                 Format  [4mtimestamp[24m according to the specification in [4mformat[24m.  If [4mutc-flag[24m is present and
                 is non-zero or non-null, the result is in UTC, otherwise the result is in  local  time.
                 The  [4mtimestamp[24m  should  be  of the same form as returned by [1msystime()[22m.  If [4mtimestamp[24m is
                 missing, the current time of day is used.  If  [4mformat[24m  is  missing,  a  default  format
                 equivalent  to  the  output  of  [4mdate[24m(1)  is  used.  The default format is available in
                 [1mPROCINFO["strftime"][22m.  See the specification for the [1mstrftime() [22mfunction in ISO  C  for
                 the format conversions that are guaranteed to be available.

       [1msystime() [22mReturn  the  current  time  of day as the number of seconds since the Epoch (1970-01-01
                 00:00:00 UTC on POSIX systems).

   [1mBit Manipulations Functions[0m
       [4mGawk[24m supplies the following bit manipulation functions.  They work by converting double-precision
       floating  point values to [1muintmax_t [22mintegers, doing the operation, and then converting the result
       back to floating point.

       [1mNOTE[22m: Passing negative operands to any of these functions causes a fatal error.

       The functions are:

       [1mand([4m[22mv1[24m[1m, [4m[22mv2[24m [, ...][1m) [22mReturn the bitwise AND of the values provided in the  argument  list.   There
                           must be at least two.

       [1mcompl([4m[22mval[24m[1m)          [22mReturn the bitwise complement of [4mval[24m.

       [1mlshift([4m[22mval[24m[1m, [4m[22mcount[24m[1m)  [22mReturn the value of [4mval[24m, shifted left by [4mcount[24m bits.

       [1mor([4m[22mv1[24m[1m, [4m[22mv2[24m [, ...][1m)  [22mReturn  the  bitwise  OR  of the values provided in the argument list.  There
                           must be at least two.

       [1mrshift([4m[22mval[24m[1m, [4m[22mcount[24m[1m)  [22mReturn the value of [4mval[24m, shifted right by [4mcount[24m bits.

       [1mxor([4m[22mv1[24m[1m, [4m[22mv2[24m [, ...][1m) [22mReturn the bitwise XOR of the values provided in the  argument  list.   There
                           must be at least two.

   [1mType Functions[0m
       The following function is for use with multidimensional arrays.

       [1misarray([4m[22mx[24m[1m)[0m
              Return true if [4mx[24m is an array, false otherwise.

       You can tell the type of any variable or array element with the following function:

       [1mtypeof([4m[22mx[24m[1m)[0m
              Return  a  string  indicating the type of [4mx[24m.  The string will be one of [1m"array"[22m, [1m"number"[22m,
              [1m"regexp"[22m, [1m"string"[22m, [1m"strnum"[22m, or [1m"undefined"[22m.

   [1mInternationalization Functions[0m
       The following functions may be used from within your AWK program for translating strings at  run-
       time.  For full details, see [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m.

       [1mbindtextdomain([4m[22mdirectory[24m [[1m, [4m[22mdomain[24m][1m)[0m
              Specify the directory where [4mgawk[24m looks for the [1m.gmo [22mfiles, in case they will not or cannot
              be placed in the ``standard'' locations (e.g., during testing).  It returns the  directory
              where [4mdomain[24m is ``bound.''
              The default [4mdomain[24m is the value of [1mTEXTDOMAIN[22m.  If [4mdirectory[24m is the null string ([1m""[22m), then
              [1mbindtextdomain() [22mreturns the current binding for the given [4mdomain[24m.

       [1mdcgettext([4m[22mstring[24m [[1m, [4m[22mdomain[24m [[1m, [4m[22mcategory[24m]][1m)[0m
              Return the translation of [4mstring[24m in text domain [4mdomain[24m for locale category [4mcategory[24m.   The
              default  value for [4mdomain[24m is the current value of [1mTEXTDOMAIN[22m.  The default value for [4mcate‚Äê[0m
              [4mgory[24m is [1m"LC_MESSAGES"[22m.
              If you supply a value for [4mcategory[24m, it must be a string equal to one of the  known  locale
              categories  described  in  [4mGAWK:[24m  [4mEffective[24m  [4mAWK[24m [4mProgramming[24m.  You must also supply a text
              domain.  Use [1mTEXTDOMAIN [22mif you want to use the current domain.

       [1mdcngettext([4m[22mstring1[24m[1m, [4m[22mstring2[24m[1m, [4m[22mnumber[24m [[1m, [4m[22mdomain[24m [[1m, [4m[22mcategory[24m]][1m)[0m
              Return the plural form used for [4mnumber[24m of the translation of [4mstring1[24m and [4mstring2[24m  in  text
              domain  [4mdomain[24m  for locale category [4mcategory[24m.  The default value for [4mdomain[24m is the current
              value of [1mTEXTDOMAIN[22m.  The default value for [4mcategory[24m is [1m"LC_MESSAGES"[22m.
              If you supply a value for [4mcategory[24m, it must be a string equal to one of the  known  locale
              categories  described  in  [4mGAWK:[24m  [4mEffective[24m  [4mAWK[24m [4mProgramming[24m.  You must also supply a text
              domain.  Use [1mTEXTDOMAIN [22mif you want to use the current domain.

[1mUSER-DEFINED FUNCTIONS[0m
       Functions in AWK are defined as follows:

              [1mfunction [4m[22mname[24m[1m([4m[22mparameter[24m [4mlist[24m[1m) { [4m[22mstatements[24m [1m}[0m

       Functions execute when they are called from within expressions in  either  patterns  or  actions.
       Actual  parameters  supplied  in  the function call are used to instantiate the formal parameters
       declared in the function.  Arrays are passed by reference, other variables are passed by value.

       Since functions were not originally part of the AWK language, the provision for  local  variables
       is rather clumsy: They are declared as extra parameters in the parameter list.  The convention is
       to separate local variables from real parameters by extra spaces  in  the  parameter  list.   For
       example:

              [1mfunction  f(p, q,     a, b)   # a and b are local[0m
              [1m{[0m
                   [1m...[0m
              [1m}[0m

              [1m/abc/     { ... ; f(1, 2) ; ... }[0m

       The  left  parenthesis  in  a  function call is required to immediately follow the function name,
       without any intervening whitespace.  This avoids a syntactic  ambiguity  with  the  concatenation
       operator.  This restriction does not apply to the built-in functions listed above.

       Functions  may call each other and may be recursive.  Function parameters used as local variables
       are initialized to the null string and the number zero upon function invocation.

       Use [1mreturn [4m[22mexpr[24m to return a value from a function.  The return value is undefined if no value  is
       provided, or if the function returns by ‚Äúfalling off‚Äù the end.

       As a [4mgawk[24m extension, functions may be called indirectly. To do this, assign the name of the func‚Äê
       tion to be called, as a string, to a variable.  Then use the variable as if it were the name of a
       function, prefixed with an [1m@ [22msign, like so:
              [1mfunction myfunc()[0m
              [1m{[0m
                   [1mprint "myfunc called"[0m
                   [1m...[0m
              [1m}[0m

              [1m{    ...[0m
                   [1mthe_func = "myfunc"[0m
                   [1m@the_func()    # call through the_func to myfunc[0m
                   [1m...[0m
              [1m}[0m
       As  of  version  4.1.2, this works with user-defined functions, built-in functions, and extension
       functions.

       If [1m--lint [22mhas been provided, [4mgawk[24m warns about calls to undefined functions at parse time, instead
       of at run time.  Calling an undefined function at run time is a fatal error.

       The word [1mfunc [22mmay be used in place of [1mfunction[22m, although this is deprecated.

[1mDYNAMICALLY LOADING NEW FUNCTIONS[0m
       You  can  dynamically  add  new built-in functions to the running [4mgawk[24m interpreter with the [1m@load[0m
       statement.  The full details are beyond the scope of this manual page; see  [4mGAWK:[24m  [4mEffective[24m  [4mAWK[0m
       [4mProgramming[24m.

[1mSIGNALS[0m
       The  [4mgawk[24m  profiler  accepts  two signals.  [1mSIGUSR1 [22mcauses it to dump a profile and function call
       stack to the profile file, which is either [1mawkprof.out[22m, or  whatever  file  was  named  with  the
       [1m--profile [22moption.  It then continues to run.  [1mSIGHUP [22mcauses [4mgawk[24m to dump the profile and function
       call stack and then exit.

[1mINTERNATIONALIZATION[0m
       String constants are sequences of characters enclosed in double quotes.  In non-English  speaking
       environments,  it  is possible to mark strings in the AWK program as requiring translation to the
       local natural language. Such strings are marked in the AWK  program  with  a  leading  underscore
       (‚Äú_‚Äù).  For example,

              [1mgawk 'BEGIN { print "hello, world" }'[0m

       always prints [1mhello, world[22m.  But,

              [1mgawk 'BEGIN { print _"hello, world" }'[0m

       might print [1mbonjour, monde [22min France.

       There are several steps involved in producing and running a localizable AWK program.

       1.  Add  a  [1mBEGIN [22maction to assign a value to the [1mTEXTDOMAIN [22mvariable to set the text domain to a
           name associated with your program:

                [1mBEGIN { TEXTDOMAIN = "myprog" }[0m

           This allows [4mgawk[24m to find the [1m.gmo [22mfile associated with your program.  Without this step, [4mgawk[0m
           uses the [1mmessages [22mtext domain, which likely does not contain translations for your program.

       2.  Mark all strings that should be translated with leading underscores.

       3.  If  necessary,  use  the  [1mdcgettext()  [22mand/or  [1mbindtextdomain() [22mfunctions in your program, as
           appropriate.

       4.  Run [1mgawk --gen-pot -f myprog.awk > myprog.pot [22mto generate a [1m.pot [22mfile for your program.

       5.  Provide appropriate translations, and build and install the corresponding [1m.gmo [22mfiles.

       The internationalization features are described in full detail in [4mGAWK:[24m  [4mEffective[24m  [4mAWK[24m  [4mProgram‚Äê[0m
       [4mming[24m.

[1mPOSIX COMPATIBILITY[0m
       A primary goal for [4mgawk[24m is compatibility with the POSIX standard, as well as with the latest ver‚Äê
       sion of Brian Kernighan's [4mawk[24m.  To this end, [4mgawk[24m incorporates the following  user  visible  fea‚Äê
       tures  which  are not described in the AWK book, but are part of the Brian Kernighan's version of
       [4mawk[24m, and are in the POSIX standard.

       The book indicates that command line variable assignment happens when [4mawk[24m  would  otherwise  open
       the argument as a file, which is after the [1mBEGIN [22mrule is executed.  However, in earlier implemen‚Äê
       tations, when such an assignment appeared before any file  names,  the  assignment  would  happen
       [4mbefore[24m  the  [1mBEGIN  [22mrule  was  run.  Applications came to depend on this ‚Äúfeature.‚Äù  When [4mawk[24m was
       changed to match its documentation, the [1m-v [22moption for assigning variables before  program  execu‚Äê
       tion  was  added  to accommodate applications that depended upon the old behavior.  (This feature
       was agreed upon by both the Bell Laboratories and the GNU developers.)

       When processing arguments, [4mgawk[24m uses the special option ‚Äú--‚Äù to signal the end of arguments.   In
       compatibility mode, it warns about but otherwise ignores undefined options.  In normal operation,
       such arguments are passed on to the AWK program for it to process.

       The AWK book does not define the return value of [1msrand()[22m.  The POSIX standard has it  return  the
       seed  it was using, to allow keeping track of random number sequences.  Therefore [1msrand() [22min [4mgawk[0m
       also returns its current seed.

       Other features are: The use of multiple [1m-f [22moptions (from MKS [4mawk[24m); the [1mENVIRON [22marray; the [1m\a[22m, and
       [1m\v  [22mescape  sequences  (done originally in [4mgawk[24m and fed back into the Bell Laboratories version);
       the [1mtolower() [22mand [1mtoupper() [22mbuilt-in functions (from the Bell Laboratories version); and the  ISO
       C conversion specifications in [1mprintf [22m(done first in the Bell Laboratories version).

[1mHISTORICAL FEATURES[0m
       There is one feature of historical AWK implementations that [4mgawk[24m supports: It is possible to call
       the [1mlength() [22mbuilt-in function not only with no argument, but even without parentheses!  Thus,

              [1ma = length     # Holy Algol 60, Batman![0m

       is the same as either of

              [1ma = length()[0m
              [1ma = length($0)[0m

       Using this feature is poor practice, and [4mgawk[24m issues a warning about its use if [1m--lint [22mis  speci‚Äê
       fied on the command line.

[1mGNU EXTENSIONS[0m
       [4mGawk[24m has a too-large number of extensions to POSIX [4mawk[24m.  They are described in this section.  All
       the extensions described here can be disabled by invoking [4mgawk[24m with the [1m--traditional [22mor  [1m--posix[0m
       options.

       The following features of [4mgawk[24m are not available in POSIX [4mawk[24m.

       ¬∑ No  path search is performed for files named via the [1m-f [22moption.  Therefore the [1mAWKPATH [22menviron‚Äê
         ment variable is not special.

       ¬∑ There is no facility for doing file inclusion ([4mgawk[24m's [1m@include [22mmechanism).

       ¬∑ There is no facility for dynamically adding new functions written in  C  ([4mgawk[24m's  [1m@load  [22mmecha‚Äê
         nism).

       ¬∑ The [1m\x [22mescape sequence.

       ¬∑ The ability to continue lines after [1m?  [22mand [1m:[22m.

       ¬∑ Octal and hexadecimal constants in AWK programs.

       ¬∑ The [1mARGIND[22m, [1mBINMODE[22m, [1mERRNO[22m, [1mLINT[22m, [1mPREC[22m, [1mROUNDMODE[22m, [1mRT [22mand [1mTEXTDOMAIN [22mvariables are not special.

       ¬∑ The [1mIGNORECASE [22mvariable and its side-effects are not available.

       ¬∑ The [1mFIELDWIDTHS [22mvariable and fixed-width field splitting.

       ¬∑ The [1mFPAT [22mvariable and field splitting based on field values.

       ¬∑ The [1mFUNCTAB[22m, [1mSYMTAB[22m, and [1mPROCINFO [22marrays are not available.

       ¬∑ The use of [1mRS [22mas a regular expression.

       ¬∑ The special file names available for I/O redirection are not recognized.

       ¬∑ The [1m|& [22moperator for creating coprocesses.

       ¬∑ The [1mBEGINFILE [22mand [1mENDFILE [22mspecial patterns are not available.

       ¬∑ The ability to split out individual characters using the null string as the value of [1mFS[22m, and as
         the third argument to [1msplit()[22m.

       ¬∑ An optional fourth argument to [1msplit() [22mto receive the separator texts.

       ¬∑ The optional second argument to the [1mclose() [22mfunction.

       ¬∑ The optional third argument to the [1mmatch() [22mfunction.

       ¬∑ The ability to use positional specifiers with [1mprintf [22mand [1msprintf()[22m.

       ¬∑ The ability to pass an array to [1mlength()[22m.

       ¬∑ The [1mand()[22m, [1masort()[22m, [1masorti()[22m, [1mbindtextdomain()[22m, [1mcompl()[22m, [1mdcgettext()[22m,  [1mdcngettext()[22m,  [1mgensub()[22m,
         [1mlshift()[22m,  [1mmktime()[22m,  [1mor()[22m,  [1mpatsplit()[22m,  [1mrshift()[22m, [1mstrftime()[22m, [1mstrtonum()[22m, [1msystime() [22mand [1mxor()[0m
         functions.

       ¬∑ Localizable strings.

       ¬∑ Non-fatal I/O.

       ¬∑ Retryable I/O.

       The AWK book does not define the return value of the [1mclose() [22mfunction.   [4mGawk[24m's  [1mclose()  [22mreturns
       the  value  from  [4mfclose[24m(3), or [4mpclose[24m(3), when closing an output file or pipe, respectively.  It
       returns the process's exit status when closing an input pipe.  The return  value  is  -1  if  the
       named file, pipe or coprocess was not opened with a redirection.

       When  [4mgawk[24m  is invoked with the [1m--traditional [22moption, if the [4mfs[24m argument to the [1m-F [22moption is ‚Äút‚Äù,
       then [1mFS [22mis set to the tab character.  Note that typing [1mgawk -F\t ...  [22msimply causes the shell  to
       quote  the  ‚Äút,‚Äù  and  does  not pass ‚Äú\t‚Äù to the [1m-F [22moption.  Since this is a rather ugly special
       case, it is not the default behavior.  This behavior also does not  occur  if  [1m--posix  [22mhas  been
       specified.   To  really  get  a  tab  character  as the field separator, it is best to use single
       quotes: [1mgawk -F'\t' ...[22m.

[1mENVIRONMENT VARIABLES[0m
       The [1mAWKPATH [22menvironment variable can be used to provide a list of directories that [4mgawk[24m  searches
       when  looking  for  files  named  via  the [1m-f[22m, --file[1m, -i [22mand [1m--include [22moptions, and the [1m@include[0m
       directive.  If the initial search fails, the path is searched again after appending [1m.awk  [22mto  the
       filename.

       The  [1mAWKLIBPATH  [22menvironment  variable  can  be  used  to provide a list of directories that [4mgawk[0m
       searches when looking for files named via the [1m-l [22mand [1m--load [22moptions.

       The [1mGAWK_READ_TIMEOUT [22menvironment variable can be used to specify a timeout in  milliseconds  for
       reading input from a terminal, pipe or two-way communication including sockets.

       For connection to a remote host via socket, [1mGAWK_SOCK_RETRIES [22mcontrols the number of retries, and
       [1mGAWK_MSEC_SLEEP [22mand the interval between retries.  The interval is in  milliseconds.  On  systems
       that do not support [4musleep[24m(3), the value is rounded up to an integral number of seconds.

       If  [1mPOSIXLY_CORRECT  [22mexists  in the environment, then [4mgawk[24m behaves exactly as if [1m--posix [22mhad been
       specified on the command line.  If [1m--lint [22mhas been specified, [4mgawk[24m issues a  warning  message  to
       this effect.

[1mEXIT STATUS[0m
       If the [1mexit [22mstatement is used with a value, then [4mgawk[24m exits with the numeric value given to it.

       Otherwise,  if  there  were no problems during execution, [4mgawk[24m exits with the value of the C con‚Äê
       stant [1mEXIT_SUCCESS[22m.  This is usually zero.

       If an error occurs, [4mgawk[24m exits with the value of the C constant [1mEXIT_FAILURE[22m.   This  is  usually
       one.

       If  [4mgawk[24m  exits because of a fatal error, the exit status is 2.  On non-POSIX systems, this value
       may be mapped to [1mEXIT_FAILURE[22m.

[1mVERSION INFORMATION[0m
       This man page documents [4mgawk[24m, version 4.2.

[1mAUTHORS[0m
       The original version of UNIX [4mawk[24m was designed and implemented by Alfred  Aho,  Peter  Weinberger,
       and Brian Kernighan of Bell Laboratories.  Brian Kernighan continues to maintain and enhance it.

       Paul  Rubin  and Jay Fenlason, of the Free Software Foundation, wrote [4mgawk[24m, to be compatible with
       the original version of [4mawk[24m distributed in Seventh Edition UNIX.  John Woods contributed a number
       of  bug  fixes.  David Trueman, with contributions from Arnold Robbins, made [4mgawk[24m compatible with
       the new version of UNIX [4mawk[24m.  Arnold Robbins is the current maintainer.

       See [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m for a full list of the contributors to [4mgawk[24m and its  documen‚Äê
       tation.

       See  the  [1mREADME  [22mfile  in the [4mgawk[24m distribution for up-to-date information about maintainers and
       which ports are currently supported.

[1mBUG REPORTS[0m
       If you find a bug in [4mgawk[24m, please send electronic mail to [1mbug-gawk@gnu.org[22m.  Please include  your
       operating  system  and  its revision, the version of [4mgawk[24m (from [1mgawk --version[22m), which C compiler
       you used to compile it, and a test program and data that are as small as possible for reproducing
       the problem.

       Before  sending  a  bug  report, please do the following things.  First, verify that you have the
       latest version of [4mgawk[24m.  Many bugs (usually subtle ones) are fixed at each release, and if  yours
       is  out  of  date,  the  problem may already have been solved.  Second, please see if setting the
       environment variable [1mLC_ALL [22mto [1mLC_ALL=C [22mcauses things to behave as you  expect.  If  so,  it's  a
       locale  issue,  and  may  or may not really be a bug.  Finally, please read this man page and the
       reference manual carefully to be sure that what you think is a bug really is, instead of  just  a
       quirk in the language.

       Whatever  you do, do [1mNOT [22mpost a bug report in [1mcomp.lang.awk[22m.  While the [4mgawk[24m developers occasion‚Äê
       ally read this newsgroup, posting bug  reports  there  is  an  unreliable  way  to  report  bugs.
       Instead, please use the electronic mail addresses given above.  Really.

       If  you're using a GNU/Linux or BSD-based system, you may wish to submit a bug report to the ven‚Äê
       dor of your distribution.  That's fine, but please send a copy to the official email  address  as
       well, since there's no guarantee that the bug report will be forwarded to the [4mgawk[24m maintainer.

[1mBUGS[0m
       The  [1m-F  [22moption  is  not necessary given the command line variable assignment feature; it remains
       only for backwards compatibility.

[1mSEE ALSO[0m
       [4megrep[24m(1), [4msed[24m(1), [4mgetpid[24m(2), [4mgetppid[24m(2),  [4mgetpgrp[24m(2),  [4mgetuid[24m(2),  [4mgeteuid[24m(2),  [4mgetgid[24m(2),  [4mgete‚Äê[0m
       [4mgid[24m(2), [4mgetgroups[24m(2), [4mprintf[24m(3), [4mstrftime[24m(3), [4musleep[24m(3)

       [4mThe[24m  [4mAWK[24m  [4mProgramming[24m  [4mLanguage[24m, Alfred V. Aho, Brian W. Kernighan, Peter J. Weinberger, Addison-
       Wesley, 1988.  ISBN 0-201-07981-X.

       [4mGAWK:[24m [4mEffective[24m [4mAWK[24m [4mProgramming[24m, Edition 4.2, shipped with the [4mgawk[24m source.  The current  version
       of this document is available online at [1mhttps://www.gnu.org/software/gawk/manual[22m.

       The GNU [1mgettext [22mdocumentation, available online at [1mhttps://www.gnu.org/software/gettext[22m.

[1mEXAMPLES[0m
       Print and sort the login names of all users:

            [1mBEGIN     { FS = ":" }[0m
                 [1m{ print $1 | "sort" }[0m

       Count lines in a file:

                 [1m{ nlines++ }[0m
            [1mEND  { print nlines }[0m

       Precede each line by its number in the file:

            [1m{ print FNR, $0 }[0m

       Concatenate and line number (a variation on a theme):

            [1m{ print NR, $0 }[0m

       Run an external command for particular lines of data:

            [1mtail -f access_log |[0m
            [1mawk '/myhome.html/ { system("nmap " $1 ">> logdir/myhome.html") }'[0m

[1mACKNOWLEDGEMENTS[0m
       Brian Kernighan provided valuable assistance during testing and debugging.  We thank him.

[1mCOPYING PERMISSIONS[0m
       Copyright  ¬©  1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004,
       2005, 2007, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Free Software  Foundation,
       Inc.

       Permission  is  granted  to  make and distribute verbatim copies of this manual page provided the
       copyright notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the con‚Äê
       ditions  for  verbatim  copying,  provided  that the entire resulting derived work is distributed
       under the terms of a permission notice identical to this one.

       Permission is granted to copy and distribute translations of this manual page into  another  lan‚Äê
       guage,  under  the above conditions for modified versions, except that this permission notice may
       be stated in a translation approved by the Foundation.

Free Software Foundation                       Mar 22 2018                                       GAWK(1)
